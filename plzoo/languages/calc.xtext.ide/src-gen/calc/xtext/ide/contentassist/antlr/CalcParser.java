/*
 * generated by Xtext 2.14.0
 */
package calc.xtext.ide.contentassist.antlr;

import calc.xtext.ide.contentassist.antlr.internal.InternalCalcParser;
import calc.xtext.services.CalcGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CalcParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CalcGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CalcGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTerminalsAccess().getAlternatives(), "rule__Terminals__Alternatives");
			builder.put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
			builder.put(grammarAccess.getMinusAccess().getGroup_1(), "rule__Minus__Group_1__0");
			builder.put(grammarAccess.getMinusAccess().getGroup_1_0(), "rule__Minus__Group_1_0__0");
			builder.put(grammarAccess.getMinusAccess().getGroup_1_0_0(), "rule__Minus__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1(), "rule__Plus__Group_1__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1_0(), "rule__Plus__Group_1_0__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1_0_0(), "rule__Plus__Group_1_0_0__0");
			builder.put(grammarAccess.getDivideAccess().getGroup(), "rule__Divide__Group__0");
			builder.put(grammarAccess.getDivideAccess().getGroup_1(), "rule__Divide__Group_1__0");
			builder.put(grammarAccess.getDivideAccess().getGroup_1_0(), "rule__Divide__Group_1_0__0");
			builder.put(grammarAccess.getDivideAccess().getGroup_1_0_0(), "rule__Divide__Group_1_0_0__0");
			builder.put(grammarAccess.getTimesAccess().getGroup(), "rule__Times__Group__0");
			builder.put(grammarAccess.getTimesAccess().getGroup_1(), "rule__Times__Group_1__0");
			builder.put(grammarAccess.getTimesAccess().getGroup_1_0(), "rule__Times__Group_1_0__0");
			builder.put(grammarAccess.getTimesAccess().getGroup_1_0_0(), "rule__Times__Group_1_0_0__0");
			builder.put(grammarAccess.getTerminalsAccess().getGroup_0(), "rule__Terminals__Group_0__0");
			builder.put(grammarAccess.getTerminalsAccess().getGroup_1(), "rule__Terminals__Group_1__0");
			builder.put(grammarAccess.getNumeralAccess().getGroup(), "rule__Numeral__Group__0");
			builder.put(grammarAccess.getMinusAccess().getRhsAssignment_1_1(), "rule__Minus__RhsAssignment_1_1");
			builder.put(grammarAccess.getPlusAccess().getRhsAssignment_1_1(), "rule__Plus__RhsAssignment_1_1");
			builder.put(grammarAccess.getDivideAccess().getRhsAssignment_1_1(), "rule__Divide__RhsAssignment_1_1");
			builder.put(grammarAccess.getTimesAccess().getRhsAssignment_1_1(), "rule__Times__RhsAssignment_1_1");
			builder.put(grammarAccess.getTerminalsAccess().getVAssignment_1_2(), "rule__Terminals__VAssignment_1_2");
			builder.put(grammarAccess.getNumeralAccess().getNAssignment_1(), "rule__Numeral__NAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CalcGrammarAccess grammarAccess;

	@Override
	protected InternalCalcParser createParser() {
		InternalCalcParser result = new InternalCalcParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CalcGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CalcGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
