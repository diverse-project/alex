/*
 * generated by Xtext 2.14.0
 */
grammar InternalCalc;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package calc.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package calc.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import calc.xtext.services.CalcGrammarAccess;

}
@parser::members {
	private CalcGrammarAccess grammarAccess;

	public void setGrammarAccess(CalcGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStart
entryRuleStart
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartAccess().getExpressionParserRuleCall()); }
		ruleExpression
		{ after(grammarAccess.getStartAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getMinusParserRuleCall()); }
		ruleMinus
		{ after(grammarAccess.getExpressionAccess().getMinusParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinus
entryRuleMinus
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinusAccess().getGroup()); }
		(rule__Minus__Group__0)
		{ after(grammarAccess.getMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivide
entryRuleDivide
:
{ before(grammarAccess.getDivideRule()); }
	 ruleDivide
{ after(grammarAccess.getDivideRule()); } 
	 EOF 
;

// Rule Divide
ruleDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivideAccess().getGroup()); }
		(rule__Divide__Group__0)
		{ after(grammarAccess.getDivideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimes
entryRuleTimes
:
{ before(grammarAccess.getTimesRule()); }
	 ruleTimes
{ after(grammarAccess.getTimesRule()); } 
	 EOF 
;

// Rule Times
ruleTimes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimesAccess().getGroup()); }
		(rule__Times__Group__0)
		{ after(grammarAccess.getTimesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminals
entryRuleTerminals
:
{ before(grammarAccess.getTerminalsRule()); }
	 ruleTerminals
{ after(grammarAccess.getTerminalsRule()); } 
	 EOF 
;

// Rule Terminals
ruleTerminals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalsAccess().getAlternatives()); }
		(rule__Terminals__Alternatives)
		{ after(grammarAccess.getTerminalsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumeral
entryRuleNumeral
:
{ before(grammarAccess.getNumeralRule()); }
	 ruleNumeral
{ after(grammarAccess.getNumeralRule()); } 
	 EOF 
;

// Rule Numeral
ruleNumeral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumeralAccess().getGroup()); }
		(rule__Numeral__Group__0)
		{ after(grammarAccess.getNumeralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalsAccess().getGroup_0()); }
		(rule__Terminals__Group_0__0)
		{ after(grammarAccess.getTerminalsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalsAccess().getGroup_1()); }
		(rule__Terminals__Group_1__0)
		{ after(grammarAccess.getTerminalsAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalsAccess().getNumeralParserRuleCall_2()); }
		ruleNumeral
		{ after(grammarAccess.getTerminalsAccess().getNumeralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getPlusParserRuleCall_0()); }
	rulePlus
	{ after(grammarAccess.getMinusAccess().getPlusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1()); }
	(rule__Minus__Group_1__0)*
	{ after(grammarAccess.getMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__0__Impl
	rule__Minus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1_0()); }
	(rule__Minus__Group_1_0__0)
	{ after(grammarAccess.getMinusAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getRhsAssignment_1_1()); }
	(rule__Minus__RhsAssignment_1_1)
	{ after(grammarAccess.getMinusAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1_0_0()); }
	(rule__Minus__Group_1_0_0__0)
	{ after(grammarAccess.getMinusAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1_0_0__0__Impl
	rule__Minus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getMinusLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMinusAccess().getMinusLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_0_0_1()); }
	'-'
	{ after(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getDivideParserRuleCall_0()); }
	ruleDivide
	{ after(grammarAccess.getPlusAccess().getDivideParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1()); }
	(rule__Plus__Group_1__0)*
	{ after(grammarAccess.getPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__0__Impl
	rule__Plus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1_0()); }
	(rule__Plus__Group_1_0__0)
	{ after(grammarAccess.getPlusAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRhsAssignment_1_1()); }
	(rule__Plus__RhsAssignment_1_1)
	{ after(grammarAccess.getPlusAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1_0_0()); }
	(rule__Plus__Group_1_0_0__0)
	{ after(grammarAccess.getPlusAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1_0_0__0__Impl
	rule__Plus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPlusAccess().getPlusLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getPlusAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__0__Impl
	rule__Divide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getTimesParserRuleCall_0()); }
	ruleTimes
	{ after(grammarAccess.getDivideAccess().getTimesParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getGroup_1()); }
	(rule__Divide__Group_1__0)*
	{ after(grammarAccess.getDivideAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__0__Impl
	rule__Divide__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getGroup_1_0()); }
	(rule__Divide__Group_1_0__0)
	{ after(grammarAccess.getDivideAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getRhsAssignment_1_1()); }
	(rule__Divide__RhsAssignment_1_1)
	{ after(grammarAccess.getDivideAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getGroup_1_0_0()); }
	(rule__Divide__Group_1_0_0__0)
	{ after(grammarAccess.getDivideAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1_0_0__0__Impl
	rule__Divide__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getDivideLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getDivideAccess().getDivideLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getSolidusKeyword_1_0_0_1()); }
	'/'
	{ after(grammarAccess.getDivideAccess().getSolidusKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Times__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group__0__Impl
	rule__Times__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getTerminalsParserRuleCall_0()); }
	ruleTerminals
	{ after(grammarAccess.getTimesAccess().getTerminalsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getGroup_1()); }
	(rule__Times__Group_1__0)*
	{ after(grammarAccess.getTimesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Times__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group_1__0__Impl
	rule__Times__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getGroup_1_0()); }
	(rule__Times__Group_1_0__0)
	{ after(grammarAccess.getTimesAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getRhsAssignment_1_1()); }
	(rule__Times__RhsAssignment_1_1)
	{ after(grammarAccess.getTimesAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Times__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getGroup_1_0_0()); }
	(rule__Times__Group_1_0_0__0)
	{ after(grammarAccess.getTimesAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Times__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group_1_0_0__0__Impl
	rule__Times__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getTimesLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getTimesAccess().getTimesLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Times__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimesAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getTimesAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminals__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_0__0__Impl
	rule__Terminals__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getTerminalsAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_0__1__Impl
	rule__Terminals__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getTerminalsAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getTerminalsAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminals__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_1__0__Impl
	rule__Terminals__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getNegateAction_1_0()); }
	()
	{ after(grammarAccess.getTerminalsAccess().getNegateAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_1__1__Impl
	rule__Terminals__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getTerminalsAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminals__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalsAccess().getVAssignment_1_2()); }
	(rule__Terminals__VAssignment_1_2)
	{ after(grammarAccess.getTerminalsAccess().getVAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Numeral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numeral__Group__0__Impl
	rule__Numeral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumeralAccess().getNumeralAction_0()); }
	()
	{ after(grammarAccess.getNumeralAccess().getNumeralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numeral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumeralAccess().getNAssignment_1()); }
	(rule__Numeral__NAssignment_1)
	{ after(grammarAccess.getNumeralAccess().getNAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinusAccess().getRhsPlusParserRuleCall_1_1_0()); }
		rulePlus
		{ after(grammarAccess.getMinusAccess().getRhsPlusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRhsDivideParserRuleCall_1_1_0()); }
		ruleDivide
		{ after(grammarAccess.getPlusAccess().getRhsDivideParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivideAccess().getRhsTimesParserRuleCall_1_1_0()); }
		ruleTimes
		{ after(grammarAccess.getDivideAccess().getRhsTimesParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Times__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimesAccess().getRhsTerminalsParserRuleCall_1_1_0()); }
		ruleTerminals
		{ after(grammarAccess.getTimesAccess().getRhsTerminalsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminals__VAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalsAccess().getVExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getTerminalsAccess().getVExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeral__NAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumeralAccess().getNINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumeralAccess().getNINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
