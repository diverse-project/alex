/*
 * generated by Xtext 2.14.0
 */
package calc.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CalcGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Start");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Start Expression:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Expression");
		private final RuleCall cMinusParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Minus;
		@Override public ParserRule getRule() { return rule; }
		
		//Minus
		public RuleCall getMinusParserRuleCall() { return cMinusParserRuleCall; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMinusLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsPlusParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Minus Expression:
		//	Plus (=> ({Minus.lhs=current} '-') rhs=Plus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Plus (=> ({Minus.lhs=current} '-') rhs=Plus)*
		public Group getGroup() { return cGroup; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_0() { return cPlusParserRuleCall_0; }
		
		//(=> ({Minus.lhs=current} '-') rhs=Plus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Minus.lhs=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Minus.lhs=current} '-'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Minus.lhs=current}
		public Action getMinusLhsAction_1_0_0_0() { return cMinusLhsAction_1_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1() { return cHyphenMinusKeyword_1_0_0_1; }
		
		//rhs=Plus
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Plus
		public RuleCall getRhsPlusParserRuleCall_1_1_0() { return cRhsPlusParserRuleCall_1_1_0; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivideParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cPlusLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsDivideParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Plus Expression:
		//	Divide (=> ({Plus.lhs=current} '+') rhs=Divide)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Divide (=> ({Plus.lhs=current} '+') rhs=Divide)*
		public Group getGroup() { return cGroup; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_0() { return cDivideParserRuleCall_0; }
		
		//(=> ({Plus.lhs=current} '+') rhs=Divide)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Plus.lhs=current} '+')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.lhs=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.lhs=current}
		public Action getPlusLhsAction_1_0_0_0() { return cPlusLhsAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//rhs=Divide
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Divide
		public RuleCall getRhsDivideParserRuleCall_1_1_0() { return cRhsDivideParserRuleCall_1_1_0; }
	}
	public class DivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Divide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDivideLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsTimesParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Divide Expression:
		//	Times (=> ({Divide.lhs=current} '/') rhs=Times)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Times (=> ({Divide.lhs=current} '/') rhs=Times)*
		public Group getGroup() { return cGroup; }
		
		//Times
		public RuleCall getTimesParserRuleCall_0() { return cTimesParserRuleCall_0; }
		
		//(=> ({Divide.lhs=current} '/') rhs=Times)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Divide.lhs=current} '/')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Divide.lhs=current} '/'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Divide.lhs=current}
		public Action getDivideLhsAction_1_0_0_0() { return cDivideLhsAction_1_0_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1() { return cSolidusKeyword_1_0_0_1; }
		
		//rhs=Times
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Times
		public RuleCall getRhsTimesParserRuleCall_1_1_0() { return cRhsTimesParserRuleCall_1_1_0; }
	}
	public class TimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Times");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cTimesLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsTerminalsParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Times Expression:
		//	Terminals (=> ({Times.lhs=current} '*') rhs=Terminals)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Terminals (=> ({Times.lhs=current} '*') rhs=Terminals)*
		public Group getGroup() { return cGroup; }
		
		//Terminals
		public RuleCall getTerminalsParserRuleCall_0() { return cTerminalsParserRuleCall_0; }
		
		//(=> ({Times.lhs=current} '*') rhs=Terminals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Times.lhs=current} '*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Times.lhs=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Times.lhs=current}
		public Action getTimesLhsAction_1_0_0_0() { return cTimesLhsAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//rhs=Terminals
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Terminals
		public RuleCall getRhsTerminalsParserRuleCall_1_1_0() { return cRhsTerminalsParserRuleCall_1_1_0; }
	}
	public class TerminalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Terminals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNegateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVExpressionParserRuleCall_1_2_0 = (RuleCall)cVAssignment_1_2.eContents().get(0);
		private final RuleCall cNumeralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Terminals Expression:
		//	'(' Expression ')' | {Negate} '-' v=Expression | Numeral;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Negate} '-' v=Expression | Numeral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Negate} '-' v=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{Negate}
		public Action getNegateAction_1_0() { return cNegateAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//v=Expression
		public Assignment getVAssignment_1_2() { return cVAssignment_1_2; }
		
		//Expression
		public RuleCall getVExpressionParserRuleCall_1_2_0() { return cVExpressionParserRuleCall_1_2_0; }
		
		//Numeral
		public RuleCall getNumeralParserRuleCall_2() { return cNumeralParserRuleCall_2; }
	}
	public class NumeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "calc.xtext.Calc.Numeral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumeralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//Numeral Expression:
		//	{Numeral} n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Numeral} n=INT
		public Group getGroup() { return cGroup; }
		
		//{Numeral}
		public Action getNumeralAction_0() { return cNumeralAction_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	
	
	private final StartElements pStart;
	private final ExpressionElements pExpression;
	private final MinusElements pMinus;
	private final PlusElements pPlus;
	private final DivideElements pDivide;
	private final TimesElements pTimes;
	private final TerminalsElements pTerminals;
	private final NumeralElements pNumeral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CalcGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.pExpression = new ExpressionElements();
		this.pMinus = new MinusElements();
		this.pPlus = new PlusElements();
		this.pDivide = new DivideElements();
		this.pTimes = new TimesElements();
		this.pTerminals = new TerminalsElements();
		this.pNumeral = new NumeralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("calc.xtext.Calc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start Expression:
	//	Expression;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//Expression:
	//	Minus;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Minus Expression:
	//	Plus (=> ({Minus.lhs=current} '-') rhs=Plus)*;
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Plus Expression:
	//	Divide (=> ({Plus.lhs=current} '+') rhs=Divide)*;
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Divide Expression:
	//	Times (=> ({Divide.lhs=current} '/') rhs=Times)*;
	public DivideElements getDivideAccess() {
		return pDivide;
	}
	
	public ParserRule getDivideRule() {
		return getDivideAccess().getRule();
	}
	
	//Times Expression:
	//	Terminals (=> ({Times.lhs=current} '*') rhs=Terminals)*;
	public TimesElements getTimesAccess() {
		return pTimes;
	}
	
	public ParserRule getTimesRule() {
		return getTimesAccess().getRule();
	}
	
	//Terminals Expression:
	//	'(' Expression ')' | {Negate} '-' v=Expression | Numeral;
	public TerminalsElements getTerminalsAccess() {
		return pTerminals;
	}
	
	public ParserRule getTerminalsRule() {
		return getTerminalsAccess().getRule();
	}
	
	//Numeral Expression:
	//	{Numeral} n=INT;
	public NumeralElements getNumeralAccess() {
		return pNumeral;
	}
	
	public ParserRule getNumeralRule() {
		return getNumeralAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
