/*
 * generated by Xtext 2.14.0
 */
package boa.xtext.ide.contentassist.antlr;

import boa.xtext.ide.contentassist.antlr.internal.InternalBoaParser;
import boa.xtext.services.BoaGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BoaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BoaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTopLevelCmdAccess().getAlternatives(), "rule__TopLevelCmd__Alternatives");
			builder.put(grammarAccess.getNonAppTerminalAccess().getAlternatives(), "rule__NonAppTerminal__Alternatives");
			builder.put(grammarAccess.getBoolAccess().getAlternatives_1(), "rule__Bool__Alternatives_1");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getFileAccess().getGroup_1(), "rule__File__Group_1__0");
			builder.put(grammarAccess.getFileAccess().getGroup_1_1(), "rule__File__Group_1_1__0");
			builder.put(grammarAccess.getDefAccess().getGroup(), "rule__Def__Group__0");
			builder.put(grammarAccess.getAppAccess().getGroup(), "rule__App__Group__0");
			builder.put(grammarAccess.getArithOpPlusAccess().getGroup(), "rule__ArithOpPlus__Group__0");
			builder.put(grammarAccess.getArithOpPlusAccess().getGroup_1(), "rule__ArithOpPlus__Group_1__0");
			builder.put(grammarAccess.getArithOpPlusAccess().getGroup_1_0(), "rule__ArithOpPlus__Group_1_0__0");
			builder.put(grammarAccess.getArithOpPlusAccess().getGroup_1_0_0(), "rule__ArithOpPlus__Group_1_0_0__0");
			builder.put(grammarAccess.getArithOpMinusAccess().getGroup(), "rule__ArithOpMinus__Group__0");
			builder.put(grammarAccess.getArithOpMinusAccess().getGroup_1(), "rule__ArithOpMinus__Group_1__0");
			builder.put(grammarAccess.getArithOpMinusAccess().getGroup_1_0(), "rule__ArithOpMinus__Group_1_0__0");
			builder.put(grammarAccess.getArithOpMinusAccess().getGroup_1_0_0(), "rule__ArithOpMinus__Group_1_0_0__0");
			builder.put(grammarAccess.getArithOpTimesAccess().getGroup(), "rule__ArithOpTimes__Group__0");
			builder.put(grammarAccess.getArithOpTimesAccess().getGroup_1(), "rule__ArithOpTimes__Group_1__0");
			builder.put(grammarAccess.getArithOpTimesAccess().getGroup_1_0(), "rule__ArithOpTimes__Group_1_0__0");
			builder.put(grammarAccess.getArithOpTimesAccess().getGroup_1_0_0(), "rule__ArithOpTimes__Group_1_0_0__0");
			builder.put(grammarAccess.getArithOpDivideAccess().getGroup(), "rule__ArithOpDivide__Group__0");
			builder.put(grammarAccess.getArithOpDivideAccess().getGroup_1(), "rule__ArithOpDivide__Group_1__0");
			builder.put(grammarAccess.getArithOpDivideAccess().getGroup_1_0(), "rule__ArithOpDivide__Group_1_0__0");
			builder.put(grammarAccess.getArithOpDivideAccess().getGroup_1_0_0(), "rule__ArithOpDivide__Group_1_0_0__0");
			builder.put(grammarAccess.getArithOpRemainderAccess().getGroup(), "rule__ArithOpRemainder__Group__0");
			builder.put(grammarAccess.getArithOpRemainderAccess().getGroup_1(), "rule__ArithOpRemainder__Group_1__0");
			builder.put(grammarAccess.getArithOpRemainderAccess().getGroup_1_0(), "rule__ArithOpRemainder__Group_1_0__0");
			builder.put(grammarAccess.getArithOpRemainderAccess().getGroup_1_0_0(), "rule__ArithOpRemainder__Group_1_0_0__0");
			builder.put(grammarAccess.getBoolOpLessAccess().getGroup(), "rule__BoolOpLess__Group__0");
			builder.put(grammarAccess.getBoolOpLessAccess().getGroup_1(), "rule__BoolOpLess__Group_1__0");
			builder.put(grammarAccess.getBoolOpLessAccess().getGroup_1_0(), "rule__BoolOpLess__Group_1_0__0");
			builder.put(grammarAccess.getBoolOpLessAccess().getGroup_1_0_0(), "rule__BoolOpLess__Group_1_0_0__0");
			builder.put(grammarAccess.getBoolOpEqualAccess().getGroup(), "rule__BoolOpEqual__Group__0");
			builder.put(grammarAccess.getBoolOpEqualAccess().getGroup_1(), "rule__BoolOpEqual__Group_1__0");
			builder.put(grammarAccess.getBoolOpEqualAccess().getGroup_1_0(), "rule__BoolOpEqual__Group_1_0__0");
			builder.put(grammarAccess.getBoolOpEqualAccess().getGroup_1_0_0(), "rule__BoolOpEqual__Group_1_0_0__0");
			builder.put(grammarAccess.getBoolOpUnequalAccess().getGroup(), "rule__BoolOpUnequal__Group__0");
			builder.put(grammarAccess.getBoolOpUnequalAccess().getGroup_1(), "rule__BoolOpUnequal__Group_1__0");
			builder.put(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0(), "rule__BoolOpUnequal__Group_1_0__0");
			builder.put(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0_0(), "rule__BoolOpUnequal__Group_1_0_0__0");
			builder.put(grammarAccess.getBoolOpAndAccess().getGroup(), "rule__BoolOpAnd__Group__0");
			builder.put(grammarAccess.getBoolOpAndAccess().getGroup_1(), "rule__BoolOpAnd__Group_1__0");
			builder.put(grammarAccess.getBoolOpAndAccess().getGroup_1_0(), "rule__BoolOpAnd__Group_1_0__0");
			builder.put(grammarAccess.getBoolOpAndAccess().getGroup_1_0_0(), "rule__BoolOpAnd__Group_1_0_0__0");
			builder.put(grammarAccess.getBoolOpOrAccess().getGroup(), "rule__BoolOpOr__Group__0");
			builder.put(grammarAccess.getBoolOpOrAccess().getGroup_1(), "rule__BoolOpOr__Group_1__0");
			builder.put(grammarAccess.getBoolOpOrAccess().getGroup_1_0(), "rule__BoolOpOr__Group_1_0__0");
			builder.put(grammarAccess.getBoolOpOrAccess().getGroup_1_0_0(), "rule__BoolOpOr__Group_1_0_0__0");
			builder.put(grammarAccess.getBWithAccess().getGroup(), "rule__BWith__Group__0");
			builder.put(grammarAccess.getBWithAccess().getGroup_1(), "rule__BWith__Group_1__0");
			builder.put(grammarAccess.getBWithAccess().getGroup_1_0(), "rule__BWith__Group_1_0__0");
			builder.put(grammarAccess.getBWithAccess().getGroup_1_0_0(), "rule__BWith__Group_1_0_0__0");
			builder.put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
			builder.put(grammarAccess.getAssignAccess().getGroup_1(), "rule__Assign__Group_1__0");
			builder.put(grammarAccess.getAssignAccess().getGroup_1_0(), "rule__Assign__Group_1_0__0");
			builder.put(grammarAccess.getAssignAccess().getGroup_1_0_0(), "rule__Assign__Group_1_0_0__0");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1(), "rule__Project__Group_1__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_0(), "rule__Project__Group_1_0__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_1_0_0(), "rule__Project__Group_1_0_0__0");
			builder.put(grammarAccess.getSeqAccess().getGroup(), "rule__Seq__Group__0");
			builder.put(grammarAccess.getSeqAccess().getGroup_1(), "rule__Seq__Group_1__0");
			builder.put(grammarAccess.getSeqAccess().getGroup_1_0(), "rule__Seq__Group_1_0__0");
			builder.put(grammarAccess.getSeqAccess().getGroup_1_0_0(), "rule__Seq__Group_1_0_0__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_3(), "rule__If__Group_3__0");
			builder.put(grammarAccess.getIfAccess().getGroup_3_2(), "rule__If__Group_3_2__0");
			builder.put(grammarAccess.getFunAccess().getGroup(), "rule__Fun__Group__0");
			builder.put(grammarAccess.getBoolOpNotAccess().getGroup(), "rule__BoolOpNot__Group__0");
			builder.put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
			builder.put(grammarAccess.getThisAccess().getGroup(), "rule__This__Group__0");
			builder.put(grammarAccess.getBoolAccess().getGroup(), "rule__Bool__Group__0");
			builder.put(grammarAccess.getIntzAccess().getGroup(), "rule__Intz__Group__0");
			builder.put(grammarAccess.getSkipAccess().getGroup(), "rule__Skip__Group__0");
			builder.put(grammarAccess.getParensAccess().getGroup(), "rule__Parens__Group__0");
			builder.put(grammarAccess.getBObjectAccess().getGroup(), "rule__BObject__Group__0");
			builder.put(grammarAccess.getBObjectAccess().getGroup_2(), "rule__BObject__Group_2__0");
			builder.put(grammarAccess.getBObjectAccess().getGroup_2_1(), "rule__BObject__Group_2_1__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getCopyAccess().getGroup(), "rule__Copy__Group__0");
			builder.put(grammarAccess.getLetAccess().getGroup(), "rule__Let__Group__0");
			builder.put(grammarAccess.getLetAccess().getGroup_5(), "rule__Let__Group_5__0");
			builder.put(grammarAccess.getLetAccess().getGroup_5_0(), "rule__Let__Group_5_0__0");
			builder.put(grammarAccess.getFileAccess().getCommandsAssignment_1_0(), "rule__File__CommandsAssignment_1_0");
			builder.put(grammarAccess.getFileAccess().getCommandsAssignment_1_1_1(), "rule__File__CommandsAssignment_1_1_1");
			builder.put(grammarAccess.getDefAccess().getNameAssignment_2(), "rule__Def__NameAssignment_2");
			builder.put(grammarAccess.getDefAccess().getExprAssignment_4(), "rule__Def__ExprAssignment_4");
			builder.put(grammarAccess.getAppAccess().getAppsAssignment_1(), "rule__App__AppsAssignment_1");
			builder.put(grammarAccess.getArithOpPlusAccess().getRhsAssignment_1_1(), "rule__ArithOpPlus__RhsAssignment_1_1");
			builder.put(grammarAccess.getArithOpMinusAccess().getRhsAssignment_1_1(), "rule__ArithOpMinus__RhsAssignment_1_1");
			builder.put(grammarAccess.getArithOpTimesAccess().getRhsAssignment_1_1(), "rule__ArithOpTimes__RhsAssignment_1_1");
			builder.put(grammarAccess.getArithOpDivideAccess().getRhsAssignment_1_1(), "rule__ArithOpDivide__RhsAssignment_1_1");
			builder.put(grammarAccess.getArithOpRemainderAccess().getRhsAssignment_1_1(), "rule__ArithOpRemainder__RhsAssignment_1_1");
			builder.put(grammarAccess.getBoolOpLessAccess().getRhsAssignment_1_1(), "rule__BoolOpLess__RhsAssignment_1_1");
			builder.put(grammarAccess.getBoolOpEqualAccess().getRhsAssignment_1_1(), "rule__BoolOpEqual__RhsAssignment_1_1");
			builder.put(grammarAccess.getBoolOpUnequalAccess().getRhsAssignment_1_1(), "rule__BoolOpUnequal__RhsAssignment_1_1");
			builder.put(grammarAccess.getBoolOpAndAccess().getRhsAssignment_1_1(), "rule__BoolOpAnd__RhsAssignment_1_1");
			builder.put(grammarAccess.getBoolOpOrAccess().getRhsAssignment_1_1(), "rule__BoolOpOr__RhsAssignment_1_1");
			builder.put(grammarAccess.getBWithAccess().getRhsAssignment_1_1(), "rule__BWith__RhsAssignment_1_1");
			builder.put(grammarAccess.getAssignAccess().getRhsAssignment_1_1(), "rule__Assign__RhsAssignment_1_1");
			builder.put(grammarAccess.getProjectAccess().getNameAssignment_1_1(), "rule__Project__NameAssignment_1_1");
			builder.put(grammarAccess.getSeqAccess().getLhsAssignment_1_1(), "rule__Seq__LhsAssignment_1_1");
			builder.put(grammarAccess.getIfAccess().getCondAssignment_2(), "rule__If__CondAssignment_2");
			builder.put(grammarAccess.getIfAccess().getThenAssignment_3_1(), "rule__If__ThenAssignment_3_1");
			builder.put(grammarAccess.getIfAccess().getElseAssignment_3_2_1(), "rule__If__ElseAssignment_3_2_1");
			builder.put(grammarAccess.getFunAccess().getNameAssignment_1(), "rule__Fun__NameAssignment_1");
			builder.put(grammarAccess.getFunAccess().getBodyAssignment_3(), "rule__Fun__BodyAssignment_3");
			builder.put(grammarAccess.getBoolOpNotAccess().getExprAssignment_2(), "rule__BoolOpNot__ExprAssignment_2");
			builder.put(grammarAccess.getVarAccess().getNameAssignment_1(), "rule__Var__NameAssignment_1");
			builder.put(grammarAccess.getBoolAccess().getValueAssignment_1_0(), "rule__Bool__ValueAssignment_1_0");
			builder.put(grammarAccess.getIntzAccess().getValueAssignment_1(), "rule__Intz__ValueAssignment_1");
			builder.put(grammarAccess.getBObjectAccess().getFieldsAssignment_2_0(), "rule__BObject__FieldsAssignment_2_0");
			builder.put(grammarAccess.getBObjectAccess().getFieldsAssignment_2_1_1(), "rule__BObject__FieldsAssignment_2_1_1");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getValueAssignment_2(), "rule__Field__ValueAssignment_2");
			builder.put(grammarAccess.getCopyAccess().getCopyAssignment_2(), "rule__Copy__CopyAssignment_2");
			builder.put(grammarAccess.getLetAccess().getNameAssignment_2(), "rule__Let__NameAssignment_2");
			builder.put(grammarAccess.getLetAccess().getLhsAssignment_4(), "rule__Let__LhsAssignment_4");
			builder.put(grammarAccess.getLetAccess().getRhsAssignment_5_0_1(), "rule__Let__RhsAssignment_5_0_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BoaGrammarAccess grammarAccess;

	@Override
	protected InternalBoaParser createParser() {
		InternalBoaParser result = new InternalBoaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
