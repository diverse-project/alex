/*
 * generated by Xtext 2.14.0
 */
grammar InternalBoa;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package boa.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package boa.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import boa.xtext.services.BoaGrammarAccess;

}
@parser::members {
	private BoaGrammarAccess grammarAccess;

	public void setGrammarAccess(BoaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevelCmd
entryRuleTopLevelCmd
:
{ before(grammarAccess.getTopLevelCmdRule()); }
	 ruleTopLevelCmd
{ after(grammarAccess.getTopLevelCmdRule()); } 
	 EOF 
;

// Rule TopLevelCmd
ruleTopLevelCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelCmdAccess().getAlternatives()); }
		(rule__TopLevelCmd__Alternatives)
		{ after(grammarAccess.getTopLevelCmdAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDef
entryRuleDef
:
{ before(grammarAccess.getDefRule()); }
	 ruleDef
{ after(grammarAccess.getDefRule()); } 
	 EOF 
;

// Rule Def
ruleDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefAccess().getGroup()); }
		(rule__Def__Group__0)
		{ after(grammarAccess.getDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getAppParserRuleCall()); }
		ruleApp
		{ after(grammarAccess.getExprAccess().getAppParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleApp
entryRuleApp
:
{ before(grammarAccess.getAppRule()); }
	 ruleApp
{ after(grammarAccess.getAppRule()); } 
	 EOF 
;

// Rule App
ruleApp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppAccess().getGroup()); }
		(rule__App__Group__0)
		{ after(grammarAccess.getAppAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonApp
entryRuleNonApp
:
{ before(grammarAccess.getNonAppRule()); }
	 ruleNonApp
{ after(grammarAccess.getNonAppRule()); } 
	 EOF 
;

// Rule NonApp
ruleNonApp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonAppAccess().getArithOpPlusParserRuleCall()); }
		ruleArithOpPlus
		{ after(grammarAccess.getNonAppAccess().getArithOpPlusParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithOpPlus
entryRuleArithOpPlus
:
{ before(grammarAccess.getArithOpPlusRule()); }
	 ruleArithOpPlus
{ after(grammarAccess.getArithOpPlusRule()); } 
	 EOF 
;

// Rule ArithOpPlus
ruleArithOpPlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithOpPlusAccess().getGroup()); }
		(rule__ArithOpPlus__Group__0)
		{ after(grammarAccess.getArithOpPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithOpMinus
entryRuleArithOpMinus
:
{ before(grammarAccess.getArithOpMinusRule()); }
	 ruleArithOpMinus
{ after(grammarAccess.getArithOpMinusRule()); } 
	 EOF 
;

// Rule ArithOpMinus
ruleArithOpMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithOpMinusAccess().getGroup()); }
		(rule__ArithOpMinus__Group__0)
		{ after(grammarAccess.getArithOpMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithOpTimes
entryRuleArithOpTimes
:
{ before(grammarAccess.getArithOpTimesRule()); }
	 ruleArithOpTimes
{ after(grammarAccess.getArithOpTimesRule()); } 
	 EOF 
;

// Rule ArithOpTimes
ruleArithOpTimes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithOpTimesAccess().getGroup()); }
		(rule__ArithOpTimes__Group__0)
		{ after(grammarAccess.getArithOpTimesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithOpDivide
entryRuleArithOpDivide
:
{ before(grammarAccess.getArithOpDivideRule()); }
	 ruleArithOpDivide
{ after(grammarAccess.getArithOpDivideRule()); } 
	 EOF 
;

// Rule ArithOpDivide
ruleArithOpDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithOpDivideAccess().getGroup()); }
		(rule__ArithOpDivide__Group__0)
		{ after(grammarAccess.getArithOpDivideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithOpRemainder
entryRuleArithOpRemainder
:
{ before(grammarAccess.getArithOpRemainderRule()); }
	 ruleArithOpRemainder
{ after(grammarAccess.getArithOpRemainderRule()); } 
	 EOF 
;

// Rule ArithOpRemainder
ruleArithOpRemainder 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithOpRemainderAccess().getGroup()); }
		(rule__ArithOpRemainder__Group__0)
		{ after(grammarAccess.getArithOpRemainderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpLess
entryRuleBoolOpLess
:
{ before(grammarAccess.getBoolOpLessRule()); }
	 ruleBoolOpLess
{ after(grammarAccess.getBoolOpLessRule()); } 
	 EOF 
;

// Rule BoolOpLess
ruleBoolOpLess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpLessAccess().getGroup()); }
		(rule__BoolOpLess__Group__0)
		{ after(grammarAccess.getBoolOpLessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpEqual
entryRuleBoolOpEqual
:
{ before(grammarAccess.getBoolOpEqualRule()); }
	 ruleBoolOpEqual
{ after(grammarAccess.getBoolOpEqualRule()); } 
	 EOF 
;

// Rule BoolOpEqual
ruleBoolOpEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpEqualAccess().getGroup()); }
		(rule__BoolOpEqual__Group__0)
		{ after(grammarAccess.getBoolOpEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpUnequal
entryRuleBoolOpUnequal
:
{ before(grammarAccess.getBoolOpUnequalRule()); }
	 ruleBoolOpUnequal
{ after(grammarAccess.getBoolOpUnequalRule()); } 
	 EOF 
;

// Rule BoolOpUnequal
ruleBoolOpUnequal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpUnequalAccess().getGroup()); }
		(rule__BoolOpUnequal__Group__0)
		{ after(grammarAccess.getBoolOpUnequalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpAnd
entryRuleBoolOpAnd
:
{ before(grammarAccess.getBoolOpAndRule()); }
	 ruleBoolOpAnd
{ after(grammarAccess.getBoolOpAndRule()); } 
	 EOF 
;

// Rule BoolOpAnd
ruleBoolOpAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpAndAccess().getGroup()); }
		(rule__BoolOpAnd__Group__0)
		{ after(grammarAccess.getBoolOpAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpOr
entryRuleBoolOpOr
:
{ before(grammarAccess.getBoolOpOrRule()); }
	 ruleBoolOpOr
{ after(grammarAccess.getBoolOpOrRule()); } 
	 EOF 
;

// Rule BoolOpOr
ruleBoolOpOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpOrAccess().getGroup()); }
		(rule__BoolOpOr__Group__0)
		{ after(grammarAccess.getBoolOpOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBWith
entryRuleBWith
:
{ before(grammarAccess.getBWithRule()); }
	 ruleBWith
{ after(grammarAccess.getBWithRule()); } 
	 EOF 
;

// Rule BWith
ruleBWith 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBWithAccess().getGroup()); }
		(rule__BWith__Group__0)
		{ after(grammarAccess.getBWithAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssign
entryRuleAssign
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignAccess().getGroup()); }
		(rule__Assign__Group__0)
		{ after(grammarAccess.getAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProject
entryRuleProject
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectAccess().getGroup()); }
		(rule__Project__Group__0)
		{ after(grammarAccess.getProjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSeq
entryRuleSeq
:
{ before(grammarAccess.getSeqRule()); }
	 ruleSeq
{ after(grammarAccess.getSeqRule()); } 
	 EOF 
;

// Rule Seq
ruleSeq 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeqAccess().getGroup()); }
		(rule__Seq__Group__0)
		{ after(grammarAccess.getSeqAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonAppTerminal
entryRuleNonAppTerminal
:
{ before(grammarAccess.getNonAppTerminalRule()); }
	 ruleNonAppTerminal
{ after(grammarAccess.getNonAppTerminalRule()); } 
	 EOF 
;

// Rule NonAppTerminal
ruleNonAppTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getAlternatives()); }
		(rule__NonAppTerminal__Alternatives)
		{ after(grammarAccess.getNonAppTerminalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFun
entryRuleFun
:
{ before(grammarAccess.getFunRule()); }
	 ruleFun
{ after(grammarAccess.getFunRule()); } 
	 EOF 
;

// Rule Fun
ruleFun 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunAccess().getGroup()); }
		(rule__Fun__Group__0)
		{ after(grammarAccess.getFunAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolOpNot
entryRuleBoolOpNot
:
{ before(grammarAccess.getBoolOpNotRule()); }
	 ruleBoolOpNot
{ after(grammarAccess.getBoolOpNotRule()); } 
	 EOF 
;

// Rule BoolOpNot
ruleBoolOpNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolOpNotAccess().getGroup()); }
		(rule__BoolOpNot__Group__0)
		{ after(grammarAccess.getBoolOpNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getGroup()); }
		(rule__Var__Group__0)
		{ after(grammarAccess.getVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThis
entryRuleThis
:
{ before(grammarAccess.getThisRule()); }
	 ruleThis
{ after(grammarAccess.getThisRule()); } 
	 EOF 
;

// Rule This
ruleThis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThisAccess().getGroup()); }
		(rule__This__Group__0)
		{ after(grammarAccess.getThisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBool
entryRuleBool
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolAccess().getGroup()); }
		(rule__Bool__Group__0)
		{ after(grammarAccess.getBoolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntz
entryRuleIntz
:
{ before(grammarAccess.getIntzRule()); }
	 ruleIntz
{ after(grammarAccess.getIntzRule()); } 
	 EOF 
;

// Rule Intz
ruleIntz 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntzAccess().getGroup()); }
		(rule__Intz__Group__0)
		{ after(grammarAccess.getIntzAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSkip
entryRuleSkip
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSkipAccess().getGroup()); }
		(rule__Skip__Group__0)
		{ after(grammarAccess.getSkipAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParens
entryRuleParens
:
{ before(grammarAccess.getParensRule()); }
	 ruleParens
{ after(grammarAccess.getParensRule()); } 
	 EOF 
;

// Rule Parens
ruleParens 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParensAccess().getGroup()); }
		(rule__Parens__Group__0)
		{ after(grammarAccess.getParensAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBObject
entryRuleBObject
:
{ before(grammarAccess.getBObjectRule()); }
	 ruleBObject
{ after(grammarAccess.getBObjectRule()); } 
	 EOF 
;

// Rule BObject
ruleBObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBObjectAccess().getGroup()); }
		(rule__BObject__Group__0)
		{ after(grammarAccess.getBObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCopy
entryRuleCopy
:
{ before(grammarAccess.getCopyRule()); }
	 ruleCopy
{ after(grammarAccess.getCopyRule()); } 
	 EOF 
;

// Rule Copy
ruleCopy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCopyAccess().getGroup()); }
		(rule__Copy__Group__0)
		{ after(grammarAccess.getCopyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLet
entryRuleLet
:
{ before(grammarAccess.getLetRule()); }
	 ruleLet
{ after(grammarAccess.getLetRule()); } 
	 EOF 
;

// Rule Let
ruleLet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetAccess().getGroup()); }
		(rule__Let__Group__0)
		{ after(grammarAccess.getLetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelCmd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelCmdAccess().getDefParserRuleCall_0()); }
		ruleDef
		{ after(grammarAccess.getTopLevelCmdAccess().getDefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelCmdAccess().getExprParserRuleCall_1()); }
		ruleExpr
		{ after(grammarAccess.getTopLevelCmdAccess().getExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonAppTerminal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getVarParserRuleCall_0()); }
		ruleVar
		{ after(grammarAccess.getNonAppTerminalAccess().getVarParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getThisParserRuleCall_1()); }
		ruleThis
		{ after(grammarAccess.getNonAppTerminalAccess().getThisParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getBoolParserRuleCall_2()); }
		ruleBool
		{ after(grammarAccess.getNonAppTerminalAccess().getBoolParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getIntzParserRuleCall_3()); }
		ruleIntz
		{ after(grammarAccess.getNonAppTerminalAccess().getIntzParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getSkipParserRuleCall_4()); }
		ruleSkip
		{ after(grammarAccess.getNonAppTerminalAccess().getSkipParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getParensParserRuleCall_5()); }
		ruleParens
		{ after(grammarAccess.getNonAppTerminalAccess().getParensParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getBObjectParserRuleCall_6()); }
		ruleBObject
		{ after(grammarAccess.getNonAppTerminalAccess().getBObjectParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getCopyParserRuleCall_7()); }
		ruleCopy
		{ after(grammarAccess.getNonAppTerminalAccess().getCopyParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getBoolOpNotParserRuleCall_8()); }
		ruleBoolOpNot
		{ after(grammarAccess.getNonAppTerminalAccess().getBoolOpNotParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getIfParserRuleCall_9()); }
		ruleIf
		{ after(grammarAccess.getNonAppTerminalAccess().getIfParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getFunParserRuleCall_10()); }
		ruleFun
		{ after(grammarAccess.getNonAppTerminalAccess().getFunParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getNonAppTerminalAccess().getLetParserRuleCall_11()); }
		ruleLet
		{ after(grammarAccess.getNonAppTerminalAccess().getLetParserRuleCall_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolAccess().getValueAssignment_1_0()); }
		(rule__Bool__ValueAssignment_1_0)
		{ after(grammarAccess.getBoolAccess().getValueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolAccess().getFalseKeyword_1_1()); }
		'false'
		{ after(grammarAccess.getBoolAccess().getFalseKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getFileAction_0()); }
	()
	{ after(grammarAccess.getFileAccess().getFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getGroup_1()); }
	(rule__File__Group_1__0)?
	{ after(grammarAccess.getFileAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group_1__0__Impl
	rule__File__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getCommandsAssignment_1_0()); }
	(rule__File__CommandsAssignment_1_0)
	{ after(grammarAccess.getFileAccess().getCommandsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getGroup_1_1()); }
	(rule__File__Group_1_1__0)*
	{ after(grammarAccess.getFileAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group_1_1__0__Impl
	rule__File__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_0()); }
	';;'
	{ after(grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group_1_1__1__Impl
	rule__File__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getCommandsAssignment_1_1_1()); }
	(rule__File__CommandsAssignment_1_1_1)
	{ after(grammarAccess.getFileAccess().getCommandsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_2()); }
	(';;')?
	{ after(grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Def__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Def__Group__0__Impl
	rule__Def__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefAccess().getDefAction_0()); }
	()
	{ after(grammarAccess.getDefAccess().getDefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Def__Group__1__Impl
	rule__Def__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefAccess().getLetKeyword_1()); }
	'let'
	{ after(grammarAccess.getDefAccess().getLetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Def__Group__2__Impl
	rule__Def__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefAccess().getNameAssignment_2()); }
	(rule__Def__NameAssignment_2)
	{ after(grammarAccess.getDefAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Def__Group__3__Impl
	rule__Def__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getDefAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Def__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefAccess().getExprAssignment_4()); }
	(rule__Def__ExprAssignment_4)
	{ after(grammarAccess.getDefAccess().getExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__0__Impl
	rule__App__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getAppAction_0()); }
	()
	{ after(grammarAccess.getAppAccess().getAppAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAppAccess().getAppsAssignment_1()); }
		(rule__App__AppsAssignment_1)
		{ after(grammarAccess.getAppAccess().getAppsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getAppAccess().getAppsAssignment_1()); }
		(rule__App__AppsAssignment_1)*
		{ after(grammarAccess.getAppAccess().getAppsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpPlus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group__0__Impl
	rule__ArithOpPlus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getArithOpMinusParserRuleCall_0()); }
	ruleArithOpMinus
	{ after(grammarAccess.getArithOpPlusAccess().getArithOpMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getGroup_1()); }
	(rule__ArithOpPlus__Group_1__0)*
	{ after(grammarAccess.getArithOpPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpPlus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group_1__0__Impl
	rule__ArithOpPlus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getGroup_1_0()); }
	(rule__ArithOpPlus__Group_1_0__0)
	{ after(grammarAccess.getArithOpPlusAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getRhsAssignment_1_1()); }
	(rule__ArithOpPlus__RhsAssignment_1_1)
	{ after(grammarAccess.getArithOpPlusAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpPlus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getGroup_1_0_0()); }
	(rule__ArithOpPlus__Group_1_0_0__0)
	{ after(grammarAccess.getArithOpPlusAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpPlus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group_1_0_0__0__Impl
	rule__ArithOpPlus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getArithOpPlusLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getArithOpPlusAccess().getArithOpPlusLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpPlus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpPlusAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getArithOpPlusAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group__0__Impl
	rule__ArithOpMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getArithOpTimesParserRuleCall_0()); }
	ruleArithOpTimes
	{ after(grammarAccess.getArithOpMinusAccess().getArithOpTimesParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getGroup_1()); }
	(rule__ArithOpMinus__Group_1__0)*
	{ after(grammarAccess.getArithOpMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group_1__0__Impl
	rule__ArithOpMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getGroup_1_0()); }
	(rule__ArithOpMinus__Group_1_0__0)
	{ after(grammarAccess.getArithOpMinusAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getRhsAssignment_1_1()); }
	(rule__ArithOpMinus__RhsAssignment_1_1)
	{ after(grammarAccess.getArithOpMinusAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpMinus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getGroup_1_0_0()); }
	(rule__ArithOpMinus__Group_1_0_0__0)
	{ after(grammarAccess.getArithOpMinusAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpMinus__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group_1_0_0__0__Impl
	rule__ArithOpMinus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getArithOpMinusLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getArithOpMinusAccess().getArithOpMinusLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpMinus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpMinusAccess().getHyphenMinusKeyword_1_0_0_1()); }
	'-'
	{ after(grammarAccess.getArithOpMinusAccess().getHyphenMinusKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpTimes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group__0__Impl
	rule__ArithOpTimes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getArithOpDivideParserRuleCall_0()); }
	ruleArithOpDivide
	{ after(grammarAccess.getArithOpTimesAccess().getArithOpDivideParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getGroup_1()); }
	(rule__ArithOpTimes__Group_1__0)*
	{ after(grammarAccess.getArithOpTimesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpTimes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group_1__0__Impl
	rule__ArithOpTimes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getGroup_1_0()); }
	(rule__ArithOpTimes__Group_1_0__0)
	{ after(grammarAccess.getArithOpTimesAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getRhsAssignment_1_1()); }
	(rule__ArithOpTimes__RhsAssignment_1_1)
	{ after(grammarAccess.getArithOpTimesAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpTimes__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getGroup_1_0_0()); }
	(rule__ArithOpTimes__Group_1_0_0__0)
	{ after(grammarAccess.getArithOpTimesAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpTimes__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group_1_0_0__0__Impl
	rule__ArithOpTimes__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getArithOpTimesLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getArithOpTimesAccess().getArithOpTimesLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpTimes__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpTimesAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getArithOpTimesAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpDivide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group__0__Impl
	rule__ArithOpDivide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getArithOpRemainderParserRuleCall_0()); }
	ruleArithOpRemainder
	{ after(grammarAccess.getArithOpDivideAccess().getArithOpRemainderParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getGroup_1()); }
	(rule__ArithOpDivide__Group_1__0)*
	{ after(grammarAccess.getArithOpDivideAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpDivide__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group_1__0__Impl
	rule__ArithOpDivide__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getGroup_1_0()); }
	(rule__ArithOpDivide__Group_1_0__0)
	{ after(grammarAccess.getArithOpDivideAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getRhsAssignment_1_1()); }
	(rule__ArithOpDivide__RhsAssignment_1_1)
	{ after(grammarAccess.getArithOpDivideAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpDivide__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getGroup_1_0_0()); }
	(rule__ArithOpDivide__Group_1_0_0__0)
	{ after(grammarAccess.getArithOpDivideAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpDivide__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group_1_0_0__0__Impl
	rule__ArithOpDivide__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getArithOpDivideLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getArithOpDivideAccess().getArithOpDivideLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpDivide__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpDivideAccess().getSolidusKeyword_1_0_0_1()); }
	'/'
	{ after(grammarAccess.getArithOpDivideAccess().getSolidusKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpRemainder__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group__0__Impl
	rule__ArithOpRemainder__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getBoolOpLessParserRuleCall_0()); }
	ruleBoolOpLess
	{ after(grammarAccess.getArithOpRemainderAccess().getBoolOpLessParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getGroup_1()); }
	(rule__ArithOpRemainder__Group_1__0)*
	{ after(grammarAccess.getArithOpRemainderAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpRemainder__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group_1__0__Impl
	rule__ArithOpRemainder__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getGroup_1_0()); }
	(rule__ArithOpRemainder__Group_1_0__0)
	{ after(grammarAccess.getArithOpRemainderAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getRhsAssignment_1_1()); }
	(rule__ArithOpRemainder__RhsAssignment_1_1)
	{ after(grammarAccess.getArithOpRemainderAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpRemainder__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getGroup_1_0_0()); }
	(rule__ArithOpRemainder__Group_1_0_0__0)
	{ after(grammarAccess.getArithOpRemainderAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithOpRemainder__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group_1_0_0__0__Impl
	rule__ArithOpRemainder__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getArithOpRemainderLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getArithOpRemainderAccess().getArithOpRemainderLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithOpRemainder__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithOpRemainderAccess().getPercentSignKeyword_1_0_0_1()); }
	'%'
	{ after(grammarAccess.getArithOpRemainderAccess().getPercentSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpLess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group__0__Impl
	rule__BoolOpLess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getBoolOpEqualParserRuleCall_0()); }
	ruleBoolOpEqual
	{ after(grammarAccess.getBoolOpLessAccess().getBoolOpEqualParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getGroup_1()); }
	(rule__BoolOpLess__Group_1__0)*
	{ after(grammarAccess.getBoolOpLessAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpLess__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group_1__0__Impl
	rule__BoolOpLess__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getGroup_1_0()); }
	(rule__BoolOpLess__Group_1_0__0)
	{ after(grammarAccess.getBoolOpLessAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getRhsAssignment_1_1()); }
	(rule__BoolOpLess__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolOpLessAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpLess__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getGroup_1_0_0()); }
	(rule__BoolOpLess__Group_1_0_0__0)
	{ after(grammarAccess.getBoolOpLessAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpLess__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group_1_0_0__0__Impl
	rule__BoolOpLess__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getBoolOpLessLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBoolOpLessAccess().getBoolOpLessLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpLess__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpLessAccess().getLessThanSignKeyword_1_0_0_1()); }
	'<'
	{ after(grammarAccess.getBoolOpLessAccess().getLessThanSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group__0__Impl
	rule__BoolOpEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getBoolOpUnequalParserRuleCall_0()); }
	ruleBoolOpUnequal
	{ after(grammarAccess.getBoolOpEqualAccess().getBoolOpUnequalParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getGroup_1()); }
	(rule__BoolOpEqual__Group_1__0)*
	{ after(grammarAccess.getBoolOpEqualAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpEqual__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group_1__0__Impl
	rule__BoolOpEqual__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getGroup_1_0()); }
	(rule__BoolOpEqual__Group_1_0__0)
	{ after(grammarAccess.getBoolOpEqualAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getRhsAssignment_1_1()); }
	(rule__BoolOpEqual__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolOpEqualAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpEqual__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getGroup_1_0_0()); }
	(rule__BoolOpEqual__Group_1_0_0__0)
	{ after(grammarAccess.getBoolOpEqualAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpEqual__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group_1_0_0__0__Impl
	rule__BoolOpEqual__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getBoolOpEqualLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBoolOpEqualAccess().getBoolOpEqualLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpEqual__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpEqualAccess().getEqualsSignKeyword_1_0_0_1()); }
	'='
	{ after(grammarAccess.getBoolOpEqualAccess().getEqualsSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpUnequal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group__0__Impl
	rule__BoolOpUnequal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getBoolOpAndParserRuleCall_0()); }
	ruleBoolOpAnd
	{ after(grammarAccess.getBoolOpUnequalAccess().getBoolOpAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getGroup_1()); }
	(rule__BoolOpUnequal__Group_1__0)*
	{ after(grammarAccess.getBoolOpUnequalAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpUnequal__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group_1__0__Impl
	rule__BoolOpUnequal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0()); }
	(rule__BoolOpUnequal__Group_1_0__0)
	{ after(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getRhsAssignment_1_1()); }
	(rule__BoolOpUnequal__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolOpUnequalAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpUnequal__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0_0()); }
	(rule__BoolOpUnequal__Group_1_0_0__0)
	{ after(grammarAccess.getBoolOpUnequalAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpUnequal__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group_1_0_0__0__Impl
	rule__BoolOpUnequal__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getBoolOpUnequalLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBoolOpUnequalAccess().getBoolOpUnequalLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpUnequal__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpUnequalAccess().getLessThanSignGreaterThanSignKeyword_1_0_0_1()); }
	'<>'
	{ after(grammarAccess.getBoolOpUnequalAccess().getLessThanSignGreaterThanSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group__0__Impl
	rule__BoolOpAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getBoolOpOrParserRuleCall_0()); }
	ruleBoolOpOr
	{ after(grammarAccess.getBoolOpAndAccess().getBoolOpOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getGroup_1()); }
	(rule__BoolOpAnd__Group_1__0)*
	{ after(grammarAccess.getBoolOpAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group_1__0__Impl
	rule__BoolOpAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getGroup_1_0()); }
	(rule__BoolOpAnd__Group_1_0__0)
	{ after(grammarAccess.getBoolOpAndAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getRhsAssignment_1_1()); }
	(rule__BoolOpAnd__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolOpAndAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpAnd__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getGroup_1_0_0()); }
	(rule__BoolOpAnd__Group_1_0_0__0)
	{ after(grammarAccess.getBoolOpAndAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpAnd__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group_1_0_0__0__Impl
	rule__BoolOpAnd__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getBoolOpAndLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBoolOpAndAccess().getBoolOpAndLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpAnd__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpAndAccess().getAndKeyword_1_0_0_1()); }
	'and'
	{ after(grammarAccess.getBoolOpAndAccess().getAndKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpOr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group__0__Impl
	rule__BoolOpOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getBWithParserRuleCall_0()); }
	ruleBWith
	{ after(grammarAccess.getBoolOpOrAccess().getBWithParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getGroup_1()); }
	(rule__BoolOpOr__Group_1__0)*
	{ after(grammarAccess.getBoolOpOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpOr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group_1__0__Impl
	rule__BoolOpOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getGroup_1_0()); }
	(rule__BoolOpOr__Group_1_0__0)
	{ after(grammarAccess.getBoolOpOrAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getRhsAssignment_1_1()); }
	(rule__BoolOpOr__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolOpOrAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpOr__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getGroup_1_0_0()); }
	(rule__BoolOpOr__Group_1_0_0__0)
	{ after(grammarAccess.getBoolOpOrAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpOr__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group_1_0_0__0__Impl
	rule__BoolOpOr__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getBoolOpOrLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBoolOpOrAccess().getBoolOpOrLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpOr__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpOrAccess().getOrKeyword_1_0_0_1()); }
	'or'
	{ after(grammarAccess.getBoolOpOrAccess().getOrKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BWith__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group__0__Impl
	rule__BWith__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getAssignParserRuleCall_0()); }
	ruleAssign
	{ after(grammarAccess.getBWithAccess().getAssignParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getGroup_1()); }
	(rule__BWith__Group_1__0)*
	{ after(grammarAccess.getBWithAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BWith__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group_1__0__Impl
	rule__BWith__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getGroup_1_0()); }
	(rule__BWith__Group_1_0__0)
	{ after(grammarAccess.getBWithAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getRhsAssignment_1_1()); }
	(rule__BWith__RhsAssignment_1_1)
	{ after(grammarAccess.getBWithAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BWith__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getGroup_1_0_0()); }
	(rule__BWith__Group_1_0_0__0)
	{ after(grammarAccess.getBWithAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BWith__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group_1_0_0__0__Impl
	rule__BWith__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getWithLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getBWithAccess().getWithLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BWith__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBWithAccess().getWithKeyword_1_0_0_1()); }
	'with'
	{ after(grammarAccess.getBWithAccess().getWithKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getProjectParserRuleCall_0()); }
	ruleProject
	{ after(grammarAccess.getAssignAccess().getProjectParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getGroup_1()); }
	(rule__Assign__Group_1__0)?
	{ after(grammarAccess.getAssignAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1__0__Impl
	rule__Assign__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getGroup_1_0()); }
	(rule__Assign__Group_1_0__0)
	{ after(grammarAccess.getAssignAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getRhsAssignment_1_1()); }
	(rule__Assign__RhsAssignment_1_1)
	{ after(grammarAccess.getAssignAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getGroup_1_0_0()); }
	(rule__Assign__Group_1_0_0__0)
	{ after(grammarAccess.getAssignAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1_0_0__0__Impl
	rule__Assign__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getAssignLhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAssignAccess().getAssignLhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_1_0_0_1()); }
	':='
	{ after(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getSeqParserRuleCall_0()); }
	ruleSeq
	{ after(grammarAccess.getProjectAccess().getSeqParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getGroup_1()); }
	(rule__Project__Group_1__0)*
	{ after(grammarAccess.getProjectAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_1__0__Impl
	rule__Project__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getGroup_1_0()); }
	(rule__Project__Group_1_0__0)
	{ after(grammarAccess.getProjectAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getNameAssignment_1_1()); }
	(rule__Project__NameAssignment_1_1)
	{ after(grammarAccess.getProjectAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getGroup_1_0_0()); }
	(rule__Project__Group_1_0_0__0)
	{ after(grammarAccess.getProjectAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_1_0_0__0__Impl
	rule__Project__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getProjectProjectAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getProjectAccess().getProjectProjectAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getFullStopKeyword_1_0_0_1()); }
	'.'
	{ after(grammarAccess.getProjectAccess().getFullStopKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Seq__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group__0__Impl
	rule__Seq__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getNonAppTerminalParserRuleCall_0()); }
	ruleNonAppTerminal
	{ after(grammarAccess.getSeqAccess().getNonAppTerminalParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getGroup_1()); }
	(rule__Seq__Group_1__0)*
	{ after(grammarAccess.getSeqAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Seq__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group_1__0__Impl
	rule__Seq__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getGroup_1_0()); }
	(rule__Seq__Group_1_0__0)
	{ after(grammarAccess.getSeqAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getLhsAssignment_1_1()); }
	(rule__Seq__LhsAssignment_1_1)
	{ after(grammarAccess.getSeqAccess().getLhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Seq__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getGroup_1_0_0()); }
	(rule__Seq__Group_1_0_0__0)
	{ after(grammarAccess.getSeqAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Seq__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group_1_0_0__0__Impl
	rule__Seq__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getSeqRhsAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getSeqAccess().getSeqRhsAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Seq__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeqAccess().getSemicolonKeyword_1_0_0_1()); }
	';'
	{ after(grammarAccess.getSeqAccess().getSemicolonKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfAction_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCondAssignment_2()); }
	(rule__If__CondAssignment_2)
	{ after(grammarAccess.getIfAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_3()); }
	(rule__If__Group_3__0)
	{ after(grammarAccess.getIfAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3__0__Impl
	rule__If__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_3_0()); }
	('then')
	{ after(grammarAccess.getIfAccess().getThenKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3__1__Impl
	rule__If__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenAssignment_3_1()); }
	(rule__If__ThenAssignment_3_1)
	{ after(grammarAccess.getIfAccess().getThenAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_3_2()); }
	(rule__If__Group_3_2__0)
	{ after(grammarAccess.getIfAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_2__0__Impl
	rule__If__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_3_2_0()); }
	('else')
	{ after(grammarAccess.getIfAccess().getElseKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseAssignment_3_2_1()); }
	(rule__If__ElseAssignment_3_2_1)
	{ after(grammarAccess.getIfAccess().getElseAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__0__Impl
	rule__Fun__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getFunKeyword_0()); }
	'fun'
	{ after(grammarAccess.getFunAccess().getFunKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__1__Impl
	rule__Fun__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getNameAssignment_1()); }
	(rule__Fun__NameAssignment_1)
	{ after(grammarAccess.getFunAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__2__Impl
	rule__Fun__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	'->'
	{ after(grammarAccess.getFunAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fun__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunAccess().getBodyAssignment_3()); }
	(rule__Fun__BodyAssignment_3)
	{ after(grammarAccess.getFunAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolOpNot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpNot__Group__0__Impl
	rule__BoolOpNot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpNotAccess().getBoolOpNotAction_0()); }
	()
	{ after(grammarAccess.getBoolOpNotAccess().getBoolOpNotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpNot__Group__1__Impl
	rule__BoolOpNot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpNotAccess().getNotKeyword_1()); }
	'not'
	{ after(grammarAccess.getBoolOpNotAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolOpNot__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolOpNotAccess().getExprAssignment_2()); }
	(rule__BoolOpNot__ExprAssignment_2)
	{ after(grammarAccess.getBoolOpNotAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__0__Impl
	rule__Var__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getVarAction_0()); }
	()
	{ after(grammarAccess.getVarAccess().getVarAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Var__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAccess().getNameAssignment_1()); }
	(rule__Var__NameAssignment_1)
	{ after(grammarAccess.getVarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__This__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__This__Group__0__Impl
	rule__This__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__This__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThisAccess().getThisAction_0()); }
	()
	{ after(grammarAccess.getThisAccess().getThisAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__This__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__This__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__This__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThisAccess().getThisKeyword_1()); }
	'this'
	{ after(grammarAccess.getThisAccess().getThisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__0__Impl
	rule__Bool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getBoolAction_0()); }
	()
	{ after(grammarAccess.getBoolAccess().getBoolAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getAlternatives_1()); }
	(rule__Bool__Alternatives_1)
	{ after(grammarAccess.getBoolAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Intz__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Intz__Group__0__Impl
	rule__Intz__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Intz__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntzAccess().getIntAction_0()); }
	()
	{ after(grammarAccess.getIntzAccess().getIntAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Intz__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Intz__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Intz__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntzAccess().getValueAssignment_1()); }
	(rule__Intz__ValueAssignment_1)
	{ after(grammarAccess.getIntzAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__0__Impl
	rule__Skip__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSkipAction_0()); }
	()
	{ after(grammarAccess.getSkipAccess().getSkipAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Skip__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSkipAccess().getSkipKeyword_1()); }
	'skip'
	{ after(grammarAccess.getSkipAccess().getSkipKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parens__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parens__Group__0__Impl
	rule__Parens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parens__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParensAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParensAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parens__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parens__Group__1__Impl
	rule__Parens__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parens__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParensAccess().getAppParserRuleCall_1()); }
	ruleApp
	{ after(grammarAccess.getParensAccess().getAppParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parens__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parens__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parens__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParensAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParensAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group__0__Impl
	rule__BObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getBObjectAction_0()); }
	()
	{ after(grammarAccess.getBObjectAccess().getBObjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group__1__Impl
	rule__BObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBObjectAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group__2__Impl
	rule__BObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getGroup_2()); }
	(rule__BObject__Group_2__0)?
	{ after(grammarAccess.getBObjectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBObjectAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BObject__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group_2__0__Impl
	rule__BObject__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getFieldsAssignment_2_0()); }
	(rule__BObject__FieldsAssignment_2_0)
	{ after(grammarAccess.getBObjectAccess().getFieldsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getGroup_2_1()); }
	(rule__BObject__Group_2_1__0)*
	{ after(grammarAccess.getBObjectAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BObject__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group_2_1__0__Impl
	rule__BObject__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getBObjectAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BObject__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBObjectAccess().getFieldsAssignment_2_1_1()); }
	(rule__BObject__FieldsAssignment_2_1_1)
	{ after(grammarAccess.getBObjectAccess().getFieldsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getNameAssignment_0()); }
	(rule__Field__NameAssignment_0)
	{ after(grammarAccess.getFieldAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getFieldAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getValueAssignment_2()); }
	(rule__Field__ValueAssignment_2)
	{ after(grammarAccess.getFieldAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Copy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__0__Impl
	rule__Copy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getCopyAction_0()); }
	()
	{ after(grammarAccess.getCopyAccess().getCopyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__1__Impl
	rule__Copy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getCopyKeyword_1()); }
	'copy'
	{ after(grammarAccess.getCopyAccess().getCopyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Copy__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCopyAccess().getCopyAssignment_2()); }
	(rule__Copy__CopyAssignment_2)
	{ after(grammarAccess.getCopyAccess().getCopyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__0__Impl
	rule__Let__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getLetAction_0()); }
	()
	{ after(grammarAccess.getLetAccess().getLetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__1__Impl
	rule__Let__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getLetKeyword_1()); }
	'let'
	{ after(grammarAccess.getLetAccess().getLetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__2__Impl
	rule__Let__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getNameAssignment_2()); }
	(rule__Let__NameAssignment_2)
	{ after(grammarAccess.getLetAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__3__Impl
	rule__Let__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getLetAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__4__Impl
	rule__Let__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getLhsAssignment_4()); }
	(rule__Let__LhsAssignment_4)
	{ after(grammarAccess.getLetAccess().getLhsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getGroup_5()); }
	(rule__Let__Group_5__0)
	{ after(grammarAccess.getLetAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group_5__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getGroup_5_0()); }
	(rule__Let__Group_5_0__0)
	{ after(grammarAccess.getLetAccess().getGroup_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group_5_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group_5_0__0__Impl
	rule__Let__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group_5_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getInKeyword_5_0_0()); }
	'in'
	{ after(grammarAccess.getLetAccess().getInKeyword_5_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group_5_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Let__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group_5_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetAccess().getRhsAssignment_5_0_1()); }
	(rule__Let__RhsAssignment_5_0_1)
	{ after(grammarAccess.getLetAccess().getRhsAssignment_5_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__CommandsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_0_0()); }
		ruleTopLevelCmd
		{ after(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__CommandsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_1_1_0()); }
		ruleTopLevelCmd
		{ after(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDefAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Def__ExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefAccess().getExprExprParserRuleCall_4_0()); }
		ruleExpr
		{ after(grammarAccess.getDefAccess().getExprExprParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__AppsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getAppsNonAppParserRuleCall_1_0()); }
		ruleNonApp
		{ after(grammarAccess.getAppAccess().getAppsNonAppParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpPlus__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithOpPlusAccess().getRhsArithOpMinusParserRuleCall_1_1_0()); }
		ruleArithOpMinus
		{ after(grammarAccess.getArithOpPlusAccess().getRhsArithOpMinusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpMinus__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithOpMinusAccess().getRhsArithOpTimesParserRuleCall_1_1_0()); }
		ruleArithOpTimes
		{ after(grammarAccess.getArithOpMinusAccess().getRhsArithOpTimesParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpTimes__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithOpTimesAccess().getRhsArithOpDivideParserRuleCall_1_1_0()); }
		ruleArithOpDivide
		{ after(grammarAccess.getArithOpTimesAccess().getRhsArithOpDivideParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpDivide__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithOpDivideAccess().getRhsArithOpRemainderParserRuleCall_1_1_0()); }
		ruleArithOpRemainder
		{ after(grammarAccess.getArithOpDivideAccess().getRhsArithOpRemainderParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithOpRemainder__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithOpRemainderAccess().getRhsBoolOpLessParserRuleCall_1_1_0()); }
		ruleBoolOpLess
		{ after(grammarAccess.getArithOpRemainderAccess().getRhsBoolOpLessParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpLess__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpLessAccess().getRhsBoolOpEqualParserRuleCall_1_1_0()); }
		ruleBoolOpEqual
		{ after(grammarAccess.getBoolOpLessAccess().getRhsBoolOpEqualParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpEqual__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpEqualAccess().getRhsBoolOpUnequalParserRuleCall_1_1_0()); }
		ruleBoolOpUnequal
		{ after(grammarAccess.getBoolOpEqualAccess().getRhsBoolOpUnequalParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpUnequal__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpUnequalAccess().getRhsBoolOpAndParserRuleCall_1_1_0()); }
		ruleBoolOpAnd
		{ after(grammarAccess.getBoolOpUnequalAccess().getRhsBoolOpAndParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpAnd__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpAndAccess().getRhsBoolOpOrParserRuleCall_1_1_0()); }
		ruleBoolOpOr
		{ after(grammarAccess.getBoolOpAndAccess().getRhsBoolOpOrParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpOr__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpOrAccess().getRhsBWithParserRuleCall_1_1_0()); }
		ruleBWith
		{ after(grammarAccess.getBoolOpOrAccess().getRhsBWithParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BWith__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBWithAccess().getRhsAssignParserRuleCall_1_1_0()); }
		ruleAssign
		{ after(grammarAccess.getBWithAccess().getRhsAssignParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignAccess().getRhsAppParserRuleCall_1_1_0()); }
		ruleApp
		{ after(grammarAccess.getAssignAccess().getRhsAppParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Seq__LhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeqAccess().getLhsNonAppTerminalParserRuleCall_1_1_0()); }
		ruleNonAppTerminal
		{ after(grammarAccess.getSeqAccess().getLhsNonAppTerminalParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getCondAppParserRuleCall_2_0()); }
		ruleApp
		{ after(grammarAccess.getIfAccess().getCondAppParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ThenAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getThenAppParserRuleCall_3_1_0()); }
		ruleApp
		{ after(grammarAccess.getIfAccess().getThenAppParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ElseAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getElseAppParserRuleCall_3_2_1_0()); }
		ruleApp
		{ after(grammarAccess.getIfAccess().getElseAppParserRuleCall_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunAccess().getBodyAppParserRuleCall_3_0()); }
		ruleApp
		{ after(grammarAccess.getFunAccess().getBodyAppParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOpNot__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOpNotAccess().getExprAppParserRuleCall_2_0()); }
		ruleApp
		{ after(grammarAccess.getBoolOpNotAccess().getExprAppParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolAccess().getValueTrueKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getBoolAccess().getValueTrueKeyword_1_0_0()); }
			'true'
			{ after(grammarAccess.getBoolAccess().getValueTrueKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getBoolAccess().getValueTrueKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Intz__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntzAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getIntzAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__FieldsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_0_0()); }
		ruleField
		{ after(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BObject__FieldsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0()); }
		ruleField
		{ after(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getValueExprParserRuleCall_2_0()); }
		ruleExpr
		{ after(grammarAccess.getFieldAccess().getValueExprParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Copy__CopyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCopyAccess().getCopyAppParserRuleCall_2_0()); }
		ruleApp
		{ after(grammarAccess.getCopyAccess().getCopyAppParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__LhsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getLhsAppParserRuleCall_4_0()); }
		ruleApp
		{ after(grammarAccess.getLetAccess().getLhsAppParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__RhsAssignment_5_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetAccess().getRhsAppParserRuleCall_5_0_1_0()); }
		ruleApp
		{ after(grammarAccess.getLetAccess().getRhsAppParserRuleCall_5_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
