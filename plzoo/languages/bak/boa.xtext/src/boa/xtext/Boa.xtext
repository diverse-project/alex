// automatically generated by Xtext
grammar boa.xtext.Boa with org.eclipse.xtext.common.Terminals

import "platform:/resource/boa.model/model/boa.ecore"

File returns File:
	{File}
	(commands+=TopLevelCmd (';;' commands+=TopLevelCmd ';;'?)*)?;

TopLevelCmd returns TopLevelCmd:
	Def | Expr;

Def returns Def:
	{Def} 'let' name=ID '=' expr=Expr;

Expr returns Expr:
	App;

App returns App:
	{App} apps+=NonApp+;

NonApp returns Expr:
	ArithOpPlus;

ArithOpPlus returns Expr:
	ArithOpMinus (=> ({ArithOpPlus.lhs=current} '+') rhs=ArithOpMinus)*;

ArithOpMinus returns Expr:
	ArithOpTimes (=> ({ArithOpMinus.lhs=current} '-') rhs=ArithOpTimes)*;

ArithOpTimes returns Expr:
	ArithOpDivide (=> ({ArithOpTimes.lhs=current} '*') rhs=ArithOpDivide)*;

ArithOpDivide returns Expr:
	ArithOpRemainder (=> ({ArithOpDivide.lhs=current} '/') rhs=ArithOpRemainder)*;

ArithOpRemainder returns Expr:
	BoolOpLess (=> ({ArithOpRemainder.lhs=current} '%') rhs=BoolOpLess)*;

BoolOpLess returns Expr:
	BoolOpEqual (=> ({BoolOpLess.lhs=current} '<') rhs=BoolOpEqual)*;

BoolOpEqual returns Expr:
	BoolOpUnequal (=> ({BoolOpEqual.lhs=current} '=') rhs=BoolOpUnequal)*;

BoolOpUnequal returns Expr:
	BoolOpAnd (=> ({BoolOpUnequal.lhs=current} '<>') rhs=BoolOpAnd)*;

BoolOpAnd returns Expr:
	BoolOpOr (=> ({BoolOpAnd.lhs=current} 'and') rhs=BoolOpOr)*;

BoolOpOr returns Expr:
	BWith (=> ({BoolOpOr.lhs=current} 'or') rhs=BWith)*;

BWith returns Expr:
	Assign (=> ({With.lhs=current} 'with') rhs=Assign)*;

Assign returns Expr:
	Project (=> ({Assign.lhs=current} ':=') rhs=App)?;

Project returns Expr:
	Seq (=> ({Project.project=current} '.') name=ID)*;

Seq returns Expr:
	NonAppTerminal (=> ({Seq.rhs=current} ';') lhs=NonAppTerminal)*;

NonAppTerminal returns Expr:
	Var | This | Bool | Intz | Skip | Parens | BObject | Copy | BoolOpNot | If | Fun | Let;

If returns Expr:
	{If} 'if' cond=App (=> 'then' then=App (=> 'else' else=App));

Fun returns Fun:
	'fun' name=ID '->' body=App;

BoolOpNot returns Expr:
	{BoolOpNot} 'not' expr=App;

Var returns Var:
	{Var} name=ID;

This returns This:
	{This} 'this';

Bool returns Bool:
	{Bool} (value?='true' | 'false');

Intz returns Int:
	{Int} value=INT;

Skip returns Skip:
	{Skip} 'skip';

Parens returns Expr:
	'(' App ')';

BObject returns BObject:
	{BObject} '{' (fields+=Field (',' fields+=Field)*)? '}';

Field returns Field:
	name=ID '=' value=Expr;

Copy returns Copy:
	{Copy} 'copy' copy=App;

Let returns Let:
	{Let} 'let' name=ID '=' lhs=App (=> ('in' rhs=App));
	
