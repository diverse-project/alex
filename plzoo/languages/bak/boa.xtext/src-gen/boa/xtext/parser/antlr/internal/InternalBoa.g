/*
 * generated by Xtext 2.14.0
 */
grammar InternalBoa;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package boa.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package boa.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import boa.xtext.services.BoaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private BoaGrammarAccess grammarAccess;

    public InternalBoaParser(TokenStream input, BoaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected BoaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileAccess().getFileAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_0_0());
					}
					lv_commands_1_0=ruleTopLevelCmd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFileRule());
						}
						add(
							$current,
							"commands",
							lv_commands_1_0,
							"boa.xtext.Boa.TopLevelCmd");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';;'
				{
					newLeafNode(otherlv_2, grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFileAccess().getCommandsTopLevelCmdParserRuleCall_1_1_1_0());
						}
						lv_commands_3_0=ruleTopLevelCmd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFileRule());
							}
							add(
								$current,
								"commands",
								lv_commands_3_0,
								"boa.xtext.Boa.TopLevelCmd");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=';;'
					{
						newLeafNode(otherlv_4, grammarAccess.getFileAccess().getSemicolonSemicolonKeyword_1_1_2());
					}
				)?
			)*
		)?
	)
;

// Entry rule entryRuleTopLevelCmd
entryRuleTopLevelCmd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelCmdRule()); }
	iv_ruleTopLevelCmd=ruleTopLevelCmd
	{ $current=$iv_ruleTopLevelCmd.current; }
	EOF;

// Rule TopLevelCmd
ruleTopLevelCmd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTopLevelCmdAccess().getDefParserRuleCall_0());
		}
		this_Def_0=ruleDef
		{
			$current = $this_Def_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTopLevelCmdAccess().getExprParserRuleCall_1());
		}
		this_Expr_1=ruleExpr
		{
			$current = $this_Expr_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDef
entryRuleDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefRule()); }
	iv_ruleDef=ruleDef
	{ $current=$iv_ruleDef.current; }
	EOF;

// Rule Def
ruleDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefAccess().getDefAction_0(),
					$current);
			}
		)
		otherlv_1='let'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefAccess().getLetKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDefAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getDefAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefAccess().getExprExprParserRuleCall_4_0());
				}
				lv_expr_4_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefRule());
					}
					set(
						$current,
						"expr",
						lv_expr_4_0,
						"boa.xtext.Boa.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExprAccess().getAppParserRuleCall());
	}
	this_App_0=ruleApp
	{
		$current = $this_App_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleApp
entryRuleApp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppRule()); }
	iv_ruleApp=ruleApp
	{ $current=$iv_ruleApp.current; }
	EOF;

// Rule App
ruleApp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAppAccess().getAppAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getAppsNonAppParserRuleCall_1_0());
				}
				lv_apps_1_0=ruleNonApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					add(
						$current,
						"apps",
						lv_apps_1_0,
						"boa.xtext.Boa.NonApp");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNonApp
entryRuleNonApp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonAppRule()); }
	iv_ruleNonApp=ruleNonApp
	{ $current=$iv_ruleNonApp.current; }
	EOF;

// Rule NonApp
ruleNonApp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getNonAppAccess().getArithOpPlusParserRuleCall());
	}
	this_ArithOpPlus_0=ruleArithOpPlus
	{
		$current = $this_ArithOpPlus_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleArithOpPlus
entryRuleArithOpPlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithOpPlusRule()); }
	iv_ruleArithOpPlus=ruleArithOpPlus
	{ $current=$iv_ruleArithOpPlus.current; }
	EOF;

// Rule ArithOpPlus
ruleArithOpPlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithOpPlusAccess().getArithOpMinusParserRuleCall_0());
		}
		this_ArithOpMinus_0=ruleArithOpMinus
		{
			$current = $this_ArithOpMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'+'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArithOpPlusAccess().getArithOpPlusLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getArithOpPlusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithOpPlusAccess().getRhsArithOpMinusParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleArithOpMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithOpPlusRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.ArithOpMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithOpMinus
entryRuleArithOpMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithOpMinusRule()); }
	iv_ruleArithOpMinus=ruleArithOpMinus
	{ $current=$iv_ruleArithOpMinus.current; }
	EOF;

// Rule ArithOpMinus
ruleArithOpMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithOpMinusAccess().getArithOpTimesParserRuleCall_0());
		}
		this_ArithOpTimes_0=ruleArithOpTimes
		{
			$current = $this_ArithOpTimes_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'-'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArithOpMinusAccess().getArithOpMinusLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='-'
					{
						newLeafNode(otherlv_2, grammarAccess.getArithOpMinusAccess().getHyphenMinusKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithOpMinusAccess().getRhsArithOpTimesParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleArithOpTimes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithOpMinusRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.ArithOpTimes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithOpTimes
entryRuleArithOpTimes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithOpTimesRule()); }
	iv_ruleArithOpTimes=ruleArithOpTimes
	{ $current=$iv_ruleArithOpTimes.current; }
	EOF;

// Rule ArithOpTimes
ruleArithOpTimes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithOpTimesAccess().getArithOpDivideParserRuleCall_0());
		}
		this_ArithOpDivide_0=ruleArithOpDivide
		{
			$current = $this_ArithOpDivide_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'*'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArithOpTimesAccess().getArithOpTimesLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getArithOpTimesAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithOpTimesAccess().getRhsArithOpDivideParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleArithOpDivide
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithOpTimesRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.ArithOpDivide");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithOpDivide
entryRuleArithOpDivide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithOpDivideRule()); }
	iv_ruleArithOpDivide=ruleArithOpDivide
	{ $current=$iv_ruleArithOpDivide.current; }
	EOF;

// Rule ArithOpDivide
ruleArithOpDivide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithOpDivideAccess().getArithOpRemainderParserRuleCall_0());
		}
		this_ArithOpRemainder_0=ruleArithOpRemainder
		{
			$current = $this_ArithOpRemainder_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'/'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArithOpDivideAccess().getArithOpDivideLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='/'
					{
						newLeafNode(otherlv_2, grammarAccess.getArithOpDivideAccess().getSolidusKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithOpDivideAccess().getRhsArithOpRemainderParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleArithOpRemainder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithOpDivideRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.ArithOpRemainder");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithOpRemainder
entryRuleArithOpRemainder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithOpRemainderRule()); }
	iv_ruleArithOpRemainder=ruleArithOpRemainder
	{ $current=$iv_ruleArithOpRemainder.current; }
	EOF;

// Rule ArithOpRemainder
ruleArithOpRemainder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArithOpRemainderAccess().getBoolOpLessParserRuleCall_0());
		}
		this_BoolOpLess_0=ruleBoolOpLess
		{
			$current = $this_BoolOpLess_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'%'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getArithOpRemainderAccess().getArithOpRemainderLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='%'
					{
						newLeafNode(otherlv_2, grammarAccess.getArithOpRemainderAccess().getPercentSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithOpRemainderAccess().getRhsBoolOpLessParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBoolOpLess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithOpRemainderRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BoolOpLess");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolOpLess
entryRuleBoolOpLess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpLessRule()); }
	iv_ruleBoolOpLess=ruleBoolOpLess
	{ $current=$iv_ruleBoolOpLess.current; }
	EOF;

// Rule BoolOpLess
ruleBoolOpLess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoolOpLessAccess().getBoolOpEqualParserRuleCall_0());
		}
		this_BoolOpEqual_0=ruleBoolOpEqual
		{
			$current = $this_BoolOpEqual_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'<'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBoolOpLessAccess().getBoolOpLessLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='<'
					{
						newLeafNode(otherlv_2, grammarAccess.getBoolOpLessAccess().getLessThanSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOpLessAccess().getRhsBoolOpEqualParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBoolOpEqual
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOpLessRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BoolOpEqual");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolOpEqual
entryRuleBoolOpEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpEqualRule()); }
	iv_ruleBoolOpEqual=ruleBoolOpEqual
	{ $current=$iv_ruleBoolOpEqual.current; }
	EOF;

// Rule BoolOpEqual
ruleBoolOpEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoolOpEqualAccess().getBoolOpUnequalParserRuleCall_0());
		}
		this_BoolOpUnequal_0=ruleBoolOpUnequal
		{
			$current = $this_BoolOpUnequal_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'='
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBoolOpEqualAccess().getBoolOpEqualLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getBoolOpEqualAccess().getEqualsSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOpEqualAccess().getRhsBoolOpUnequalParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBoolOpUnequal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOpEqualRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BoolOpUnequal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolOpUnequal
entryRuleBoolOpUnequal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpUnequalRule()); }
	iv_ruleBoolOpUnequal=ruleBoolOpUnequal
	{ $current=$iv_ruleBoolOpUnequal.current; }
	EOF;

// Rule BoolOpUnequal
ruleBoolOpUnequal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoolOpUnequalAccess().getBoolOpAndParserRuleCall_0());
		}
		this_BoolOpAnd_0=ruleBoolOpAnd
		{
			$current = $this_BoolOpAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'<>'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBoolOpUnequalAccess().getBoolOpUnequalLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='<>'
					{
						newLeafNode(otherlv_2, grammarAccess.getBoolOpUnequalAccess().getLessThanSignGreaterThanSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOpUnequalAccess().getRhsBoolOpAndParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBoolOpAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOpUnequalRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BoolOpAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolOpAnd
entryRuleBoolOpAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpAndRule()); }
	iv_ruleBoolOpAnd=ruleBoolOpAnd
	{ $current=$iv_ruleBoolOpAnd.current; }
	EOF;

// Rule BoolOpAnd
ruleBoolOpAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoolOpAndAccess().getBoolOpOrParserRuleCall_0());
		}
		this_BoolOpOr_0=ruleBoolOpOr
		{
			$current = $this_BoolOpOr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'and'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBoolOpAndAccess().getBoolOpAndLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='and'
					{
						newLeafNode(otherlv_2, grammarAccess.getBoolOpAndAccess().getAndKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOpAndAccess().getRhsBoolOpOrParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBoolOpOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOpAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BoolOpOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBoolOpOr
entryRuleBoolOpOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpOrRule()); }
	iv_ruleBoolOpOr=ruleBoolOpOr
	{ $current=$iv_ruleBoolOpOr.current; }
	EOF;

// Rule BoolOpOr
ruleBoolOpOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoolOpOrAccess().getBWithParserRuleCall_0());
		}
		this_BWith_0=ruleBWith
		{
			$current = $this_BWith_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'or'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBoolOpOrAccess().getBoolOpOrLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='or'
					{
						newLeafNode(otherlv_2, grammarAccess.getBoolOpOrAccess().getOrKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolOpOrAccess().getRhsBWithParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleBWith
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolOpOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.BWith");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBWith
entryRuleBWith returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBWithRule()); }
	iv_ruleBWith=ruleBWith
	{ $current=$iv_ruleBWith.current; }
	EOF;

// Rule BWith
ruleBWith returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBWithAccess().getAssignParserRuleCall_0());
		}
		this_Assign_0=ruleAssign
		{
			$current = $this_Assign_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'with'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getBWithAccess().getWithLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='with'
					{
						newLeafNode(otherlv_2, grammarAccess.getBWithAccess().getWithKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBWithAccess().getRhsAssignParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleAssign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBWithRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.Assign");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	iv_ruleAssign=ruleAssign
	{ $current=$iv_ruleAssign.current; }
	EOF;

// Rule Assign
ruleAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignAccess().getProjectParserRuleCall_0());
		}
		this_Project_0=ruleProject
		{
			$current = $this_Project_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					':='
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAssignAccess().getAssignLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=':='
					{
						newLeafNode(otherlv_2, grammarAccess.getAssignAccess().getColonEqualsSignKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignAccess().getRhsAppParserRuleCall_1_1_0());
					}
					lv_rhs_3_0=ruleApp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"boa.xtext.Boa.App");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProjectAccess().getSeqParserRuleCall_0());
		}
		this_Seq_0=ruleSeq
		{
			$current = $this_Seq_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'.'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getProjectAccess().getProjectProjectAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='.'
					{
						newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getFullStopKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProjectRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSeq
entryRuleSeq returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeqRule()); }
	iv_ruleSeq=ruleSeq
	{ $current=$iv_ruleSeq.current; }
	EOF;

// Rule Seq
ruleSeq returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSeqAccess().getNonAppTerminalParserRuleCall_0());
		}
		this_NonAppTerminal_0=ruleNonAppTerminal
		{
			$current = $this_NonAppTerminal_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					';'
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSeqAccess().getSeqRhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2=';'
					{
						newLeafNode(otherlv_2, grammarAccess.getSeqAccess().getSemicolonKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSeqAccess().getLhsNonAppTerminalParserRuleCall_1_1_0());
					}
					lv_lhs_3_0=ruleNonAppTerminal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSeqRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_3_0,
							"boa.xtext.Boa.NonAppTerminal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNonAppTerminal
entryRuleNonAppTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonAppTerminalRule()); }
	iv_ruleNonAppTerminal=ruleNonAppTerminal
	{ $current=$iv_ruleNonAppTerminal.current; }
	EOF;

// Rule NonAppTerminal
ruleNonAppTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getVarParserRuleCall_0());
		}
		this_Var_0=ruleVar
		{
			$current = $this_Var_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getThisParserRuleCall_1());
		}
		this_This_1=ruleThis
		{
			$current = $this_This_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getBoolParserRuleCall_2());
		}
		this_Bool_2=ruleBool
		{
			$current = $this_Bool_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getIntzParserRuleCall_3());
		}
		this_Intz_3=ruleIntz
		{
			$current = $this_Intz_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getSkipParserRuleCall_4());
		}
		this_Skip_4=ruleSkip
		{
			$current = $this_Skip_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getParensParserRuleCall_5());
		}
		this_Parens_5=ruleParens
		{
			$current = $this_Parens_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getBObjectParserRuleCall_6());
		}
		this_BObject_6=ruleBObject
		{
			$current = $this_BObject_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getCopyParserRuleCall_7());
		}
		this_Copy_7=ruleCopy
		{
			$current = $this_Copy_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getBoolOpNotParserRuleCall_8());
		}
		this_BoolOpNot_8=ruleBoolOpNot
		{
			$current = $this_BoolOpNot_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getIfParserRuleCall_9());
		}
		this_If_9=ruleIf
		{
			$current = $this_If_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getFunParserRuleCall_10());
		}
		this_Fun_10=ruleFun
		{
			$current = $this_Fun_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonAppTerminalAccess().getLetParserRuleCall_11());
		}
		this_Let_11=ruleLet
		{
			$current = $this_Let_11.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getCondAppParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"boa.xtext.Boa.App");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('then')=>
				otherlv_3='then'
				{
					newLeafNode(otherlv_3, grammarAccess.getIfAccess().getThenKeyword_3_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getThenAppParserRuleCall_3_1_0());
					}
					lv_then_4_0=ruleApp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						set(
							$current,
							"then",
							lv_then_4_0,
							"boa.xtext.Boa.App");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					('else')=>
					otherlv_5='else'
					{
						newLeafNode(otherlv_5, grammarAccess.getIfAccess().getElseKeyword_3_2_0());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIfAccess().getElseAppParserRuleCall_3_2_1_0());
						}
						lv_else_6_0=ruleApp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfRule());
							}
							set(
								$current,
								"else",
								lv_else_6_0,
								"boa.xtext.Boa.App");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleFun
entryRuleFun returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunRule()); }
	iv_ruleFun=ruleFun
	{ $current=$iv_ruleFun.current; }
	EOF;

// Rule Fun
ruleFun returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fun'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunAccess().getFunKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunAccess().getBodyAppParserRuleCall_3_0());
				}
				lv_body_3_0=ruleApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"boa.xtext.Boa.App");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolOpNot
entryRuleBoolOpNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpNotRule()); }
	iv_ruleBoolOpNot=ruleBoolOpNot
	{ $current=$iv_ruleBoolOpNot.current; }
	EOF;

// Rule BoolOpNot
ruleBoolOpNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolOpNotAccess().getBoolOpNotAction_0(),
					$current);
			}
		)
		otherlv_1='not'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolOpNotAccess().getNotKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolOpNotAccess().getExprAppParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolOpNotRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"boa.xtext.Boa.App");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarAccess().getVarAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	iv_ruleThis=ruleThis
	{ $current=$iv_ruleThis.current; }
	EOF;

// Rule This
ruleThis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getThisAccess().getThisAction_0(),
					$current);
			}
		)
		otherlv_1='this'
		{
			newLeafNode(otherlv_1, grammarAccess.getThisAccess().getThisKeyword_1());
		}
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolAccess().getBoolAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0='true'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getBoolAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolRule());
						}
						setWithLastConsumed($current, "value", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleIntz
entryRuleIntz returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntzRule()); }
	iv_ruleIntz=ruleIntz
	{ $current=$iv_ruleIntz.current; }
	EOF;

// Rule Intz
ruleIntz returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntzAccess().getIntAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getIntzAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntzRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSkip
entryRuleSkip returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkipRule()); }
	iv_ruleSkip=ruleSkip
	{ $current=$iv_ruleSkip.current; }
	EOF;

// Rule Skip
ruleSkip returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSkipAccess().getSkipAction_0(),
					$current);
			}
		)
		otherlv_1='skip'
		{
			newLeafNode(otherlv_1, grammarAccess.getSkipAccess().getSkipKeyword_1());
		}
	)
;

// Entry rule entryRuleParens
entryRuleParens returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParensRule()); }
	iv_ruleParens=ruleParens
	{ $current=$iv_ruleParens.current; }
	EOF;

// Rule Parens
ruleParens returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParensAccess().getLeftParenthesisKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getParensAccess().getAppParserRuleCall_1());
		}
		this_App_1=ruleApp
		{
			$current = $this_App_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParensAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleBObject
entryRuleBObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBObjectRule()); }
	iv_ruleBObject=ruleBObject
	{ $current=$iv_ruleBObject.current; }
	EOF;

// Rule BObject
ruleBObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBObjectAccess().getBObjectAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBObjectAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_0_0());
					}
					lv_fields_2_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBObjectRule());
						}
						add(
							$current,
							"fields",
							lv_fields_2_0,
							"boa.xtext.Boa.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getBObjectAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBObjectAccess().getFieldsFieldParserRuleCall_2_1_1_0());
						}
						lv_fields_4_0=ruleField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBObjectRule());
							}
							add(
								$current,
								"fields",
								lv_fields_4_0,
								"boa.xtext.Boa.Field");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBObjectAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getValueExprParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"boa.xtext.Boa.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCopy
entryRuleCopy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCopyRule()); }
	iv_ruleCopy=ruleCopy
	{ $current=$iv_ruleCopy.current; }
	EOF;

// Rule Copy
ruleCopy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCopyAccess().getCopyAction_0(),
					$current);
			}
		)
		otherlv_1='copy'
		{
			newLeafNode(otherlv_1, grammarAccess.getCopyAccess().getCopyKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCopyAccess().getCopyAppParserRuleCall_2_0());
				}
				lv_copy_2_0=ruleApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCopyRule());
					}
					set(
						$current,
						"copy",
						lv_copy_2_0,
						"boa.xtext.Boa.App");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLet
entryRuleLet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetRule()); }
	iv_ruleLet=ruleLet
	{ $current=$iv_ruleLet.current; }
	EOF;

// Rule Let
ruleLet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getLetAccess().getLetAction_0(),
					$current);
			}
		)
		otherlv_1='let'
		{
			newLeafNode(otherlv_1, grammarAccess.getLetAccess().getLetKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLetAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getLetAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetAccess().getLhsAppParserRuleCall_4_0());
				}
				lv_lhs_4_0=ruleApp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_4_0,
						"boa.xtext.Boa.App");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				'in'
				(
					(
						ruleApp
					)
				)
			)
			)=>
			(
				otherlv_5='in'
				{
					newLeafNode(otherlv_5, grammarAccess.getLetAccess().getInKeyword_5_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLetAccess().getRhsAppParserRuleCall_5_0_1_0());
						}
						lv_rhs_6_0=ruleApp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLetRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_6_0,
								"boa.xtext.Boa.App");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
