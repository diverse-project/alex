/*
 * generated by Xtext 2.14.0
 */
package boa.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCommandsTopLevelCmdParserRuleCall_1_0_0 = (RuleCall)cCommandsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCommandsTopLevelCmdParserRuleCall_1_1_1_0 = (RuleCall)cCommandsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonSemicolonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//File:
		//	{File} (commands+=TopLevelCmd (';;' commands+=TopLevelCmd ';;'?)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{File} (commands+=TopLevelCmd (';;' commands+=TopLevelCmd ';;'?)*)?
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//(commands+=TopLevelCmd (';;' commands+=TopLevelCmd ';;'?)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//commands+=TopLevelCmd
		public Assignment getCommandsAssignment_1_0() { return cCommandsAssignment_1_0; }
		
		//TopLevelCmd
		public RuleCall getCommandsTopLevelCmdParserRuleCall_1_0_0() { return cCommandsTopLevelCmdParserRuleCall_1_0_0; }
		
		//(';;' commands+=TopLevelCmd ';;'?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//';;'
		public Keyword getSemicolonSemicolonKeyword_1_1_0() { return cSemicolonSemicolonKeyword_1_1_0; }
		
		//commands+=TopLevelCmd
		public Assignment getCommandsAssignment_1_1_1() { return cCommandsAssignment_1_1_1; }
		
		//TopLevelCmd
		public RuleCall getCommandsTopLevelCmdParserRuleCall_1_1_1_0() { return cCommandsTopLevelCmdParserRuleCall_1_1_1_0; }
		
		//';;'?
		public Keyword getSemicolonSemicolonKeyword_1_1_2() { return cSemicolonSemicolonKeyword_1_1_2; }
	}
	public class TopLevelCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.TopLevelCmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelCmd:
		//	Def | Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//Def | Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Def
		public RuleCall getDefParserRuleCall_0() { return cDefParserRuleCall_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class DefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Def");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//Def:
		//	{Def} 'let' name=ID '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//{Def} 'let' name=ID '=' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//{Def}
		public Action getDefAction_0() { return cDefAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Expr");
		private final RuleCall cAppParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	App;
		@Override public ParserRule getRule() { return rule; }
		
		//App
		public RuleCall getAppParserRuleCall() { return cAppParserRuleCall; }
	}
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAppAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAppsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAppsNonAppParserRuleCall_1_0 = (RuleCall)cAppsAssignment_1.eContents().get(0);
		
		//App:
		//	{App} apps+=NonApp+;
		@Override public ParserRule getRule() { return rule; }
		
		//{App} apps+=NonApp+
		public Group getGroup() { return cGroup; }
		
		//{App}
		public Action getAppAction_0() { return cAppAction_0; }
		
		//apps+=NonApp+
		public Assignment getAppsAssignment_1() { return cAppsAssignment_1; }
		
		//NonApp
		public RuleCall getAppsNonAppParserRuleCall_1_0() { return cAppsNonAppParserRuleCall_1_0; }
	}
	public class NonAppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.NonApp");
		private final RuleCall cArithOpPlusParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NonApp Expr:
		//	ArithOpPlus;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithOpPlus
		public RuleCall getArithOpPlusParserRuleCall() { return cArithOpPlusParserRuleCall; }
	}
	public class ArithOpPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithOpMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cArithOpPlusLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsArithOpMinusParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ArithOpPlus Expr:
		//	ArithOpMinus (=> ({ArithOpPlus.lhs=current} '+') rhs=ArithOpMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithOpMinus (=> ({ArithOpPlus.lhs=current} '+') rhs=ArithOpMinus)*
		public Group getGroup() { return cGroup; }
		
		//ArithOpMinus
		public RuleCall getArithOpMinusParserRuleCall_0() { return cArithOpMinusParserRuleCall_0; }
		
		//(=> ({ArithOpPlus.lhs=current} '+') rhs=ArithOpMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ArithOpPlus.lhs=current} '+')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithOpPlus.lhs=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ArithOpPlus.lhs=current}
		public Action getArithOpPlusLhsAction_1_0_0_0() { return cArithOpPlusLhsAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//rhs=ArithOpMinus
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//ArithOpMinus
		public RuleCall getRhsArithOpMinusParserRuleCall_1_1_0() { return cRhsArithOpMinusParserRuleCall_1_1_0; }
	}
	public class ArithOpMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithOpTimesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cArithOpMinusLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsArithOpTimesParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ArithOpMinus Expr:
		//	ArithOpTimes (=> ({ArithOpMinus.lhs=current} '-') rhs=ArithOpTimes)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithOpTimes (=> ({ArithOpMinus.lhs=current} '-') rhs=ArithOpTimes)*
		public Group getGroup() { return cGroup; }
		
		//ArithOpTimes
		public RuleCall getArithOpTimesParserRuleCall_0() { return cArithOpTimesParserRuleCall_0; }
		
		//(=> ({ArithOpMinus.lhs=current} '-') rhs=ArithOpTimes)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ArithOpMinus.lhs=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithOpMinus.lhs=current} '-'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ArithOpMinus.lhs=current}
		public Action getArithOpMinusLhsAction_1_0_0_0() { return cArithOpMinusLhsAction_1_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1() { return cHyphenMinusKeyword_1_0_0_1; }
		
		//rhs=ArithOpTimes
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//ArithOpTimes
		public RuleCall getRhsArithOpTimesParserRuleCall_1_1_0() { return cRhsArithOpTimesParserRuleCall_1_1_0; }
	}
	public class ArithOpTimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpTimes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithOpDivideParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cArithOpTimesLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsArithOpDivideParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ArithOpTimes Expr:
		//	ArithOpDivide (=> ({ArithOpTimes.lhs=current} '*') rhs=ArithOpDivide)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithOpDivide (=> ({ArithOpTimes.lhs=current} '*') rhs=ArithOpDivide)*
		public Group getGroup() { return cGroup; }
		
		//ArithOpDivide
		public RuleCall getArithOpDivideParserRuleCall_0() { return cArithOpDivideParserRuleCall_0; }
		
		//(=> ({ArithOpTimes.lhs=current} '*') rhs=ArithOpDivide)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ArithOpTimes.lhs=current} '*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithOpTimes.lhs=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ArithOpTimes.lhs=current}
		public Action getArithOpTimesLhsAction_1_0_0_0() { return cArithOpTimesLhsAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//rhs=ArithOpDivide
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//ArithOpDivide
		public RuleCall getRhsArithOpDivideParserRuleCall_1_1_0() { return cRhsArithOpDivideParserRuleCall_1_1_0; }
	}
	public class ArithOpDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpDivide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithOpRemainderParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cArithOpDivideLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsArithOpRemainderParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ArithOpDivide Expr:
		//	ArithOpRemainder (=> ({ArithOpDivide.lhs=current} '/') rhs=ArithOpRemainder)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithOpRemainder (=> ({ArithOpDivide.lhs=current} '/') rhs=ArithOpRemainder)*
		public Group getGroup() { return cGroup; }
		
		//ArithOpRemainder
		public RuleCall getArithOpRemainderParserRuleCall_0() { return cArithOpRemainderParserRuleCall_0; }
		
		//(=> ({ArithOpDivide.lhs=current} '/') rhs=ArithOpRemainder)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ArithOpDivide.lhs=current} '/')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithOpDivide.lhs=current} '/'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ArithOpDivide.lhs=current}
		public Action getArithOpDivideLhsAction_1_0_0_0() { return cArithOpDivideLhsAction_1_0_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1() { return cSolidusKeyword_1_0_0_1; }
		
		//rhs=ArithOpRemainder
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//ArithOpRemainder
		public RuleCall getRhsArithOpRemainderParserRuleCall_1_1_0() { return cRhsArithOpRemainderParserRuleCall_1_1_0; }
	}
	public class ArithOpRemainderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpRemainder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpLessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cArithOpRemainderLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBoolOpLessParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//ArithOpRemainder Expr:
		//	BoolOpLess (=> ({ArithOpRemainder.lhs=current} '%') rhs=BoolOpLess)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpLess (=> ({ArithOpRemainder.lhs=current} '%') rhs=BoolOpLess)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpLess
		public RuleCall getBoolOpLessParserRuleCall_0() { return cBoolOpLessParserRuleCall_0; }
		
		//(=> ({ArithOpRemainder.lhs=current} '%') rhs=BoolOpLess)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ArithOpRemainder.lhs=current} '%')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArithOpRemainder.lhs=current} '%'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ArithOpRemainder.lhs=current}
		public Action getArithOpRemainderLhsAction_1_0_0_0() { return cArithOpRemainderLhsAction_1_0_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0_0_1() { return cPercentSignKeyword_1_0_0_1; }
		
		//rhs=BoolOpLess
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BoolOpLess
		public RuleCall getRhsBoolOpLessParserRuleCall_1_1_0() { return cRhsBoolOpLessParserRuleCall_1_1_0; }
	}
	public class BoolOpLessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpLess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBoolOpLessLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBoolOpEqualParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolOpLess Expr:
		//	BoolOpEqual (=> ({BoolOpLess.lhs=current} '<') rhs=BoolOpEqual)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpEqual (=> ({BoolOpLess.lhs=current} '<') rhs=BoolOpEqual)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpEqual
		public RuleCall getBoolOpEqualParserRuleCall_0() { return cBoolOpEqualParserRuleCall_0; }
		
		//(=> ({BoolOpLess.lhs=current} '<') rhs=BoolOpEqual)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BoolOpLess.lhs=current} '<')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpLess.lhs=current} '<'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BoolOpLess.lhs=current}
		public Action getBoolOpLessLhsAction_1_0_0_0() { return cBoolOpLessLhsAction_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }
		
		//rhs=BoolOpEqual
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BoolOpEqual
		public RuleCall getRhsBoolOpEqualParserRuleCall_1_1_0() { return cRhsBoolOpEqualParserRuleCall_1_1_0; }
	}
	public class BoolOpEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpUnequalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBoolOpEqualLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBoolOpUnequalParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolOpEqual Expr:
		//	BoolOpUnequal (=> ({BoolOpEqual.lhs=current} '=') rhs=BoolOpUnequal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpUnequal (=> ({BoolOpEqual.lhs=current} '=') rhs=BoolOpUnequal)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpUnequal
		public RuleCall getBoolOpUnequalParserRuleCall_0() { return cBoolOpUnequalParserRuleCall_0; }
		
		//(=> ({BoolOpEqual.lhs=current} '=') rhs=BoolOpUnequal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BoolOpEqual.lhs=current} '=')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpEqual.lhs=current} '='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BoolOpEqual.lhs=current}
		public Action getBoolOpEqualLhsAction_1_0_0_0() { return cBoolOpEqualLhsAction_1_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//rhs=BoolOpUnequal
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BoolOpUnequal
		public RuleCall getRhsBoolOpUnequalParserRuleCall_1_1_0() { return cRhsBoolOpUnequalParserRuleCall_1_1_0; }
	}
	public class BoolOpUnequalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpUnequal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBoolOpUnequalLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBoolOpAndParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolOpUnequal Expr:
		//	BoolOpAnd (=> ({BoolOpUnequal.lhs=current} '<>') rhs=BoolOpAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpAnd (=> ({BoolOpUnequal.lhs=current} '<>') rhs=BoolOpAnd)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpAnd
		public RuleCall getBoolOpAndParserRuleCall_0() { return cBoolOpAndParserRuleCall_0; }
		
		//(=> ({BoolOpUnequal.lhs=current} '<>') rhs=BoolOpAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BoolOpUnequal.lhs=current} '<>')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpUnequal.lhs=current} '<>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BoolOpUnequal.lhs=current}
		public Action getBoolOpUnequalLhsAction_1_0_0_0() { return cBoolOpUnequalLhsAction_1_0_0_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1_0_0_1() { return cLessThanSignGreaterThanSignKeyword_1_0_0_1; }
		
		//rhs=BoolOpAnd
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BoolOpAnd
		public RuleCall getRhsBoolOpAndParserRuleCall_1_1_0() { return cRhsBoolOpAndParserRuleCall_1_1_0; }
	}
	public class BoolOpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOpOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBoolOpAndLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBoolOpOrParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolOpAnd Expr:
		//	BoolOpOr (=> ({BoolOpAnd.lhs=current} 'and') rhs=BoolOpOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOpOr (=> ({BoolOpAnd.lhs=current} 'and') rhs=BoolOpOr)*
		public Group getGroup() { return cGroup; }
		
		//BoolOpOr
		public RuleCall getBoolOpOrParserRuleCall_0() { return cBoolOpOrParserRuleCall_0; }
		
		//(=> ({BoolOpAnd.lhs=current} 'and') rhs=BoolOpOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BoolOpAnd.lhs=current} 'and')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpAnd.lhs=current} 'and'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BoolOpAnd.lhs=current}
		public Action getBoolOpAndLhsAction_1_0_0_0() { return cBoolOpAndLhsAction_1_0_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_1() { return cAndKeyword_1_0_0_1; }
		
		//rhs=BoolOpOr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BoolOpOr
		public RuleCall getRhsBoolOpOrParserRuleCall_1_1_0() { return cRhsBoolOpOrParserRuleCall_1_1_0; }
	}
	public class BoolOpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBWithParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBoolOpOrLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsBWithParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BoolOpOr Expr:
		//	BWith (=> ({BoolOpOr.lhs=current} 'or') rhs=BWith)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BWith (=> ({BoolOpOr.lhs=current} 'or') rhs=BWith)*
		public Group getGroup() { return cGroup; }
		
		//BWith
		public RuleCall getBWithParserRuleCall_0() { return cBWithParserRuleCall_0; }
		
		//(=> ({BoolOpOr.lhs=current} 'or') rhs=BWith)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({BoolOpOr.lhs=current} 'or')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BoolOpOr.lhs=current} 'or'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BoolOpOr.lhs=current}
		public Action getBoolOpOrLhsAction_1_0_0_0() { return cBoolOpOrLhsAction_1_0_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1_0_0_1() { return cOrKeyword_1_0_0_1; }
		
		//rhs=BWith
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//BWith
		public RuleCall getRhsBWithParserRuleCall_1_1_0() { return cRhsBWithParserRuleCall_1_1_0; }
	}
	public class BWithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BWith");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cWithLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cWithKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAssignParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//BWith Expr:
		//	Assign (=> ({With.lhs=current} 'with') rhs=Assign)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Assign (=> ({With.lhs=current} 'with') rhs=Assign)*
		public Group getGroup() { return cGroup; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_0() { return cAssignParserRuleCall_0; }
		
		//(=> ({With.lhs=current} 'with') rhs=Assign)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({With.lhs=current} 'with')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{With.lhs=current} 'with'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{With.lhs=current}
		public Action getWithLhsAction_1_0_0_0() { return cWithLhsAction_1_0_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1_0_0_1() { return cWithKeyword_1_0_0_1; }
		
		//rhs=Assign
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Assign
		public RuleCall getRhsAssignParserRuleCall_1_1_0() { return cRhsAssignParserRuleCall_1_1_0; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProjectParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAssignLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAppParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Assign Expr:
		//	Project (=> ({Assign.lhs=current} ':=') rhs=App)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Project (=> ({Assign.lhs=current} ':=') rhs=App)?
		public Group getGroup() { return cGroup; }
		
		//Project
		public RuleCall getProjectParserRuleCall_0() { return cProjectParserRuleCall_0; }
		
		//(=> ({Assign.lhs=current} ':=') rhs=App)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Assign.lhs=current} ':=')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Assign.lhs=current} ':='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Assign.lhs=current}
		public Action getAssignLhsAction_1_0_0_0() { return cAssignLhsAction_1_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_0_0_1() { return cColonEqualsSignKeyword_1_0_0_1; }
		
		//rhs=App
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//App
		public RuleCall getRhsAppParserRuleCall_1_1_0() { return cRhsAppParserRuleCall_1_1_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSeqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cProjectProjectAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Project Expr:
		//	Seq (=> ({Project.project=current} '.') name=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Seq (=> ({Project.project=current} '.') name=ID)*
		public Group getGroup() { return cGroup; }
		
		//Seq
		public RuleCall getSeqParserRuleCall_0() { return cSeqParserRuleCall_0; }
		
		//(=> ({Project.project=current} '.') name=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Project.project=current} '.')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Project.project=current} '.'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Project.project=current}
		public Action getProjectProjectAction_1_0_0_0() { return cProjectProjectAction_1_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_1() { return cFullStopKeyword_1_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class SeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Seq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonAppTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cSeqRhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cLhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLhsNonAppTerminalParserRuleCall_1_1_0 = (RuleCall)cLhsAssignment_1_1.eContents().get(0);
		
		//Seq Expr:
		//	NonAppTerminal (=> ({Seq.rhs=current} ';') lhs=NonAppTerminal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NonAppTerminal (=> ({Seq.rhs=current} ';') lhs=NonAppTerminal)*
		public Group getGroup() { return cGroup; }
		
		//NonAppTerminal
		public RuleCall getNonAppTerminalParserRuleCall_0() { return cNonAppTerminalParserRuleCall_0; }
		
		//(=> ({Seq.rhs=current} ';') lhs=NonAppTerminal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Seq.rhs=current} ';')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Seq.rhs=current} ';'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Seq.rhs=current}
		public Action getSeqRhsAction_1_0_0_0() { return cSeqRhsAction_1_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_0_1() { return cSemicolonKeyword_1_0_0_1; }
		
		//lhs=NonAppTerminal
		public Assignment getLhsAssignment_1_1() { return cLhsAssignment_1_1; }
		
		//NonAppTerminal
		public RuleCall getLhsNonAppTerminalParserRuleCall_1_1_0() { return cLhsNonAppTerminalParserRuleCall_1_1_0; }
	}
	public class NonAppTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.NonAppTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntzParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSkipParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParensParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBObjectParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCopyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBoolOpNotParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIfParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFunParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLetParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//NonAppTerminal Expr:
		//	Var | This | Bool | Intz | Skip | Parens | BObject | Copy | BoolOpNot | If | Fun | Let;
		@Override public ParserRule getRule() { return rule; }
		
		//Var | This | Bool | Intz | Skip | Parens | BObject | Copy | BoolOpNot | If | Fun | Let
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }
		
		//This
		public RuleCall getThisParserRuleCall_1() { return cThisParserRuleCall_1; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_2() { return cBoolParserRuleCall_2; }
		
		//Intz
		public RuleCall getIntzParserRuleCall_3() { return cIntzParserRuleCall_3; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_4() { return cSkipParserRuleCall_4; }
		
		//Parens
		public RuleCall getParensParserRuleCall_5() { return cParensParserRuleCall_5; }
		
		//BObject
		public RuleCall getBObjectParserRuleCall_6() { return cBObjectParserRuleCall_6; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_7() { return cCopyParserRuleCall_7; }
		
		//BoolOpNot
		public RuleCall getBoolOpNotParserRuleCall_8() { return cBoolOpNotParserRuleCall_8; }
		
		//If
		public RuleCall getIfParserRuleCall_9() { return cIfParserRuleCall_9; }
		
		//Fun
		public RuleCall getFunParserRuleCall_10() { return cFunParserRuleCall_10; }
		
		//Let
		public RuleCall getLetParserRuleCall_11() { return cLetParserRuleCall_11; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondAppParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cThenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThenAppParserRuleCall_3_1_0 = (RuleCall)cThenAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cElseKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElseAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElseAppParserRuleCall_3_2_1_0 = (RuleCall)cElseAssignment_3_2_1.eContents().get(0);
		
		//If Expr:
		//	{If} 'if' cond=App (=> 'then' then=App (=> 'else' else=App));
		@Override public ParserRule getRule() { return rule; }
		
		//{If} 'if' cond=App (=> 'then' then=App (=> 'else' else=App))
		public Group getGroup() { return cGroup; }
		
		//{If}
		public Action getIfAction_0() { return cIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//cond=App
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//App
		public RuleCall getCondAppParserRuleCall_2_0() { return cCondAppParserRuleCall_2_0; }
		
		//=> 'then' then=App (=> 'else' else=App)
		public Group getGroup_3() { return cGroup_3; }
		
		//=> 'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }
		
		//then=App
		public Assignment getThenAssignment_3_1() { return cThenAssignment_3_1; }
		
		//App
		public RuleCall getThenAppParserRuleCall_3_1_0() { return cThenAppParserRuleCall_3_1_0; }
		
		//=> 'else' else=App
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//=> 'else'
		public Keyword getElseKeyword_3_2_0() { return cElseKeyword_3_2_0; }
		
		//else=App
		public Assignment getElseAssignment_3_2_1() { return cElseAssignment_3_2_1; }
		
		//App
		public RuleCall getElseAppParserRuleCall_3_2_1_0() { return cElseAppParserRuleCall_3_2_1_0; }
	}
	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Fun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyAppParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Fun:
		//	'fun' name=ID '->' body=App;
		@Override public ParserRule getRule() { return rule; }
		
		//'fun' name=ID '->' body=App
		public Group getGroup() { return cGroup; }
		
		//'fun'
		public Keyword getFunKeyword_0() { return cFunKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//body=App
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//App
		public RuleCall getBodyAppParserRuleCall_3_0() { return cBodyAppParserRuleCall_3_0; }
	}
	public class BoolOpNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolOpNotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAppParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//BoolOpNot Expr:
		//	{BoolOpNot} 'not' expr=App;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolOpNot} 'not' expr=App
		public Group getGroup() { return cGroup; }
		
		//{BoolOpNot}
		public Action getBoolOpNotAction_0() { return cBoolOpNotAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//expr=App
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//App
		public RuleCall getExprAppParserRuleCall_2_0() { return cExprAppParserRuleCall_2_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Var:
		//	{Var} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.This");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//This:
		//	{This} 'this';
		@Override public ParserRule getRule() { return rule; }
		
		//{This} 'this'
		public Group getGroup() { return cGroup; }
		
		//{This}
		public Action getThisAction_0() { return cThisAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Bool:
		//	{Bool} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{Bool} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{Bool}
		public Action getBoolAction_0() { return cBoolAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class IntzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Intz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Intz Int:
		//	{Int} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Int} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Int}
		public Action getIntAction_0() { return cIntAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Skip:
		//	{Skip} 'skip';
		@Override public ParserRule getRule() { return rule; }
		
		//{Skip} 'skip'
		public Group getGroup() { return cGroup; }
		
		//{Skip}
		public Action getSkipAction_0() { return cSkipAction_0; }
		
		//'skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}
	public class ParensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAppParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parens Expr:
		//	'(' App ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' App ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//App
		public RuleCall getAppParserRuleCall_1() { return cAppParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_2_0_0 = (RuleCall)cFieldsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BObject:
		//	{BObject} '{' (fields+=Field (',' fields+=Field)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BObject} '{' (fields+=Field (',' fields+=Field)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{BObject}
		public Action getBObjectAction_0() { return cBObjectAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fields+=Field (',' fields+=Field)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_0() { return cFieldsAssignment_2_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0_0() { return cFieldsFieldParserRuleCall_2_0_0; }
		
		//(',' fields+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_1_0() { return cFieldsFieldParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	name=ID '=' value=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=Expr
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expr
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_2_0() { return cValueExprParserRuleCall_2_0; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCopyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCopyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCopyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCopyAppParserRuleCall_2_0 = (RuleCall)cCopyAssignment_2.eContents().get(0);
		
		//Copy:
		//	{Copy} 'copy' copy=App;
		@Override public ParserRule getRule() { return rule; }
		
		//{Copy} 'copy' copy=App
		public Group getGroup() { return cGroup; }
		
		//{Copy}
		public Action getCopyAction_0() { return cCopyAction_0; }
		
		//'copy'
		public Keyword getCopyKeyword_1() { return cCopyKeyword_1; }
		
		//copy=App
		public Assignment getCopyAssignment_2() { return cCopyAssignment_2; }
		
		//App
		public RuleCall getCopyAppParserRuleCall_2_0() { return cCopyAppParserRuleCall_2_0; }
	}
	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsAppParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Keyword cInKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cRhsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cRhsAppParserRuleCall_5_0_1_0 = (RuleCall)cRhsAssignment_5_0_1.eContents().get(0);
		
		//Let:
		//	{Let} 'let' name=ID '=' lhs=App => ('in' rhs=App);
		@Override public ParserRule getRule() { return rule; }
		
		//{Let} 'let' name=ID '=' lhs=App => ('in' rhs=App)
		public Group getGroup() { return cGroup; }
		
		//{Let}
		public Action getLetAction_0() { return cLetAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//lhs=App
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//App
		public RuleCall getLhsAppParserRuleCall_4_0() { return cLhsAppParserRuleCall_4_0; }
		
		//=> ('in' rhs=App)
		public Group getGroup_5() { return cGroup_5; }
		
		//'in' rhs=App
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'in'
		public Keyword getInKeyword_5_0_0() { return cInKeyword_5_0_0; }
		
		//rhs=App
		public Assignment getRhsAssignment_5_0_1() { return cRhsAssignment_5_0_1; }
		
		//App
		public RuleCall getRhsAppParserRuleCall_5_0_1_0() { return cRhsAppParserRuleCall_5_0_1_0; }
	}
	
	
	private final FileElements pFile;
	private final TopLevelCmdElements pTopLevelCmd;
	private final DefElements pDef;
	private final ExprElements pExpr;
	private final AppElements pApp;
	private final NonAppElements pNonApp;
	private final ArithOpPlusElements pArithOpPlus;
	private final ArithOpMinusElements pArithOpMinus;
	private final ArithOpTimesElements pArithOpTimes;
	private final ArithOpDivideElements pArithOpDivide;
	private final ArithOpRemainderElements pArithOpRemainder;
	private final BoolOpLessElements pBoolOpLess;
	private final BoolOpEqualElements pBoolOpEqual;
	private final BoolOpUnequalElements pBoolOpUnequal;
	private final BoolOpAndElements pBoolOpAnd;
	private final BoolOpOrElements pBoolOpOr;
	private final BWithElements pBWith;
	private final AssignElements pAssign;
	private final ProjectElements pProject;
	private final SeqElements pSeq;
	private final NonAppTerminalElements pNonAppTerminal;
	private final IfElements pIf;
	private final FunElements pFun;
	private final BoolOpNotElements pBoolOpNot;
	private final VarElements pVar;
	private final ThisElements pThis;
	private final BoolElements pBool;
	private final IntzElements pIntz;
	private final SkipElements pSkip;
	private final ParensElements pParens;
	private final BObjectElements pBObject;
	private final FieldElements pField;
	private final CopyElements pCopy;
	private final LetElements pLet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pTopLevelCmd = new TopLevelCmdElements();
		this.pDef = new DefElements();
		this.pExpr = new ExprElements();
		this.pApp = new AppElements();
		this.pNonApp = new NonAppElements();
		this.pArithOpPlus = new ArithOpPlusElements();
		this.pArithOpMinus = new ArithOpMinusElements();
		this.pArithOpTimes = new ArithOpTimesElements();
		this.pArithOpDivide = new ArithOpDivideElements();
		this.pArithOpRemainder = new ArithOpRemainderElements();
		this.pBoolOpLess = new BoolOpLessElements();
		this.pBoolOpEqual = new BoolOpEqualElements();
		this.pBoolOpUnequal = new BoolOpUnequalElements();
		this.pBoolOpAnd = new BoolOpAndElements();
		this.pBoolOpOr = new BoolOpOrElements();
		this.pBWith = new BWithElements();
		this.pAssign = new AssignElements();
		this.pProject = new ProjectElements();
		this.pSeq = new SeqElements();
		this.pNonAppTerminal = new NonAppTerminalElements();
		this.pIf = new IfElements();
		this.pFun = new FunElements();
		this.pBoolOpNot = new BoolOpNotElements();
		this.pVar = new VarElements();
		this.pThis = new ThisElements();
		this.pBool = new BoolElements();
		this.pIntz = new IntzElements();
		this.pSkip = new SkipElements();
		this.pParens = new ParensElements();
		this.pBObject = new BObjectElements();
		this.pField = new FieldElements();
		this.pCopy = new CopyElements();
		this.pLet = new LetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("boa.xtext.Boa".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	{File} (commands+=TopLevelCmd (';;' commands+=TopLevelCmd ';;'?)*)?;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//TopLevelCmd:
	//	Def | Expr;
	public TopLevelCmdElements getTopLevelCmdAccess() {
		return pTopLevelCmd;
	}
	
	public ParserRule getTopLevelCmdRule() {
		return getTopLevelCmdAccess().getRule();
	}
	
	//Def:
	//	{Def} 'let' name=ID '=' expr=Expr;
	public DefElements getDefAccess() {
		return pDef;
	}
	
	public ParserRule getDefRule() {
		return getDefAccess().getRule();
	}
	
	//Expr:
	//	App;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//App:
	//	{App} apps+=NonApp+;
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//NonApp Expr:
	//	ArithOpPlus;
	public NonAppElements getNonAppAccess() {
		return pNonApp;
	}
	
	public ParserRule getNonAppRule() {
		return getNonAppAccess().getRule();
	}
	
	//ArithOpPlus Expr:
	//	ArithOpMinus (=> ({ArithOpPlus.lhs=current} '+') rhs=ArithOpMinus)*;
	public ArithOpPlusElements getArithOpPlusAccess() {
		return pArithOpPlus;
	}
	
	public ParserRule getArithOpPlusRule() {
		return getArithOpPlusAccess().getRule();
	}
	
	//ArithOpMinus Expr:
	//	ArithOpTimes (=> ({ArithOpMinus.lhs=current} '-') rhs=ArithOpTimes)*;
	public ArithOpMinusElements getArithOpMinusAccess() {
		return pArithOpMinus;
	}
	
	public ParserRule getArithOpMinusRule() {
		return getArithOpMinusAccess().getRule();
	}
	
	//ArithOpTimes Expr:
	//	ArithOpDivide (=> ({ArithOpTimes.lhs=current} '*') rhs=ArithOpDivide)*;
	public ArithOpTimesElements getArithOpTimesAccess() {
		return pArithOpTimes;
	}
	
	public ParserRule getArithOpTimesRule() {
		return getArithOpTimesAccess().getRule();
	}
	
	//ArithOpDivide Expr:
	//	ArithOpRemainder (=> ({ArithOpDivide.lhs=current} '/') rhs=ArithOpRemainder)*;
	public ArithOpDivideElements getArithOpDivideAccess() {
		return pArithOpDivide;
	}
	
	public ParserRule getArithOpDivideRule() {
		return getArithOpDivideAccess().getRule();
	}
	
	//ArithOpRemainder Expr:
	//	BoolOpLess (=> ({ArithOpRemainder.lhs=current} '%') rhs=BoolOpLess)*;
	public ArithOpRemainderElements getArithOpRemainderAccess() {
		return pArithOpRemainder;
	}
	
	public ParserRule getArithOpRemainderRule() {
		return getArithOpRemainderAccess().getRule();
	}
	
	//BoolOpLess Expr:
	//	BoolOpEqual (=> ({BoolOpLess.lhs=current} '<') rhs=BoolOpEqual)*;
	public BoolOpLessElements getBoolOpLessAccess() {
		return pBoolOpLess;
	}
	
	public ParserRule getBoolOpLessRule() {
		return getBoolOpLessAccess().getRule();
	}
	
	//BoolOpEqual Expr:
	//	BoolOpUnequal (=> ({BoolOpEqual.lhs=current} '=') rhs=BoolOpUnequal)*;
	public BoolOpEqualElements getBoolOpEqualAccess() {
		return pBoolOpEqual;
	}
	
	public ParserRule getBoolOpEqualRule() {
		return getBoolOpEqualAccess().getRule();
	}
	
	//BoolOpUnequal Expr:
	//	BoolOpAnd (=> ({BoolOpUnequal.lhs=current} '<>') rhs=BoolOpAnd)*;
	public BoolOpUnequalElements getBoolOpUnequalAccess() {
		return pBoolOpUnequal;
	}
	
	public ParserRule getBoolOpUnequalRule() {
		return getBoolOpUnequalAccess().getRule();
	}
	
	//BoolOpAnd Expr:
	//	BoolOpOr (=> ({BoolOpAnd.lhs=current} 'and') rhs=BoolOpOr)*;
	public BoolOpAndElements getBoolOpAndAccess() {
		return pBoolOpAnd;
	}
	
	public ParserRule getBoolOpAndRule() {
		return getBoolOpAndAccess().getRule();
	}
	
	//BoolOpOr Expr:
	//	BWith (=> ({BoolOpOr.lhs=current} 'or') rhs=BWith)*;
	public BoolOpOrElements getBoolOpOrAccess() {
		return pBoolOpOr;
	}
	
	public ParserRule getBoolOpOrRule() {
		return getBoolOpOrAccess().getRule();
	}
	
	//BWith Expr:
	//	Assign (=> ({With.lhs=current} 'with') rhs=Assign)*;
	public BWithElements getBWithAccess() {
		return pBWith;
	}
	
	public ParserRule getBWithRule() {
		return getBWithAccess().getRule();
	}
	
	//Assign Expr:
	//	Project (=> ({Assign.lhs=current} ':=') rhs=App)?;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//Project Expr:
	//	Seq (=> ({Project.project=current} '.') name=ID)*;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Seq Expr:
	//	NonAppTerminal (=> ({Seq.rhs=current} ';') lhs=NonAppTerminal)*;
	public SeqElements getSeqAccess() {
		return pSeq;
	}
	
	public ParserRule getSeqRule() {
		return getSeqAccess().getRule();
	}
	
	//NonAppTerminal Expr:
	//	Var | This | Bool | Intz | Skip | Parens | BObject | Copy | BoolOpNot | If | Fun | Let;
	public NonAppTerminalElements getNonAppTerminalAccess() {
		return pNonAppTerminal;
	}
	
	public ParserRule getNonAppTerminalRule() {
		return getNonAppTerminalAccess().getRule();
	}
	
	//If Expr:
	//	{If} 'if' cond=App (=> 'then' then=App (=> 'else' else=App));
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Fun:
	//	'fun' name=ID '->' body=App;
	public FunElements getFunAccess() {
		return pFun;
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}
	
	//BoolOpNot Expr:
	//	{BoolOpNot} 'not' expr=App;
	public BoolOpNotElements getBoolOpNotAccess() {
		return pBoolOpNot;
	}
	
	public ParserRule getBoolOpNotRule() {
		return getBoolOpNotAccess().getRule();
	}
	
	//Var:
	//	{Var} name=ID;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//This:
	//	{This} 'this';
	public ThisElements getThisAccess() {
		return pThis;
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}
	
	//Bool:
	//	{Bool} (value?='true' | 'false');
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//Intz Int:
	//	{Int} value=INT;
	public IntzElements getIntzAccess() {
		return pIntz;
	}
	
	public ParserRule getIntzRule() {
		return getIntzAccess().getRule();
	}
	
	//Skip:
	//	{Skip} 'skip';
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//Parens Expr:
	//	'(' App ')';
	public ParensElements getParensAccess() {
		return pParens;
	}
	
	public ParserRule getParensRule() {
		return getParensAccess().getRule();
	}
	
	//BObject:
	//	{BObject} '{' (fields+=Field (',' fields+=Field)*)? '}';
	public BObjectElements getBObjectAccess() {
		return pBObject;
	}
	
	public ParserRule getBObjectRule() {
		return getBObjectAccess().getRule();
	}
	
	//Field:
	//	name=ID '=' value=Expr;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Copy:
	//	{Copy} 'copy' copy=App;
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Let:
	//	{Let} 'let' name=ID '=' lhs=App => ('in' rhs=App);
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
