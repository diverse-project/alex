/**
 * generated by Xtext 2.14.0
 */
package fr.inria.diverse.alex.xtext.alex.util;

import fr.inria.diverse.alex.xtext.alex.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.inria.diverse.alex.xtext.alex.AlexPackage
 * @generated
 */
public class AlexSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlexPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AlexPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AlexPackage.ALEX_ROOT:
      {
        AlexRoot alexRoot = (AlexRoot)theEObject;
        T result = caseAlexRoot(alexRoot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.COMPILE_TARGET:
      {
        CompileTarget compileTarget = (CompileTarget)theEObject;
        T result = caseCompileTarget(compileTarget);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.ECORE_IMPORT:
      {
        EcoreImport ecoreImport = (EcoreImport)theEObject;
        T result = caseEcoreImport(ecoreImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.ALEX_IMPORT:
      {
        AlexImport alexImport = (AlexImport)theEObject;
        T result = caseAlexImport(alexImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.ALEX_CLASS:
      {
        AlexClass alexClass = (AlexClass)theEObject;
        T result = caseAlexClass(alexClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.MUTABLE_REF:
      {
        MutableRef mutableRef = (MutableRef)theEObject;
        T result = caseMutableRef(mutableRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.ALEX_METHOD:
      {
        AlexMethod alexMethod = (AlexMethod)theEObject;
        T result = caseAlexMethod(alexMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.CONCRETE_METHOD:
      {
        ConcreteMethod concreteMethod = (ConcreteMethod)theEObject;
        T result = caseConcreteMethod(concreteMethod);
        if (result == null) result = caseAlexMethod(concreteMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.ABSTRACT_METHOD:
      {
        AbstractMethod abstractMethod = (AbstractMethod)theEObject;
        T result = caseAbstractMethod(abstractMethod);
        if (result == null) result = caseAlexMethod(abstractMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.DEF_METHOD:
      {
        DefMethod defMethod = (DefMethod)theEObject;
        T result = caseDefMethod(defMethod);
        if (result == null) result = caseConcreteMethod(defMethod);
        if (result == null) result = caseAlexMethod(defMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlexPackage.OVERRIDE_METHOD:
      {
        OverrideMethod overrideMethod = (OverrideMethod)theEObject;
        T result = caseOverrideMethod(overrideMethod);
        if (result == null) result = caseConcreteMethod(overrideMethod);
        if (result == null) result = caseAlexMethod(overrideMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlexRoot(AlexRoot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compile Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compile Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompileTarget(CompileTarget object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ecore Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ecore Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEcoreImport(EcoreImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlexImport(AlexImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlexClass(AlexClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mutable Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mutable Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMutableRef(MutableRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlexMethod(AlexMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteMethod(ConcreteMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractMethod(AbstractMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Def Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Def Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefMethod(DefMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Override Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Override Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOverrideMethod(OverrideMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AlexSwitch
