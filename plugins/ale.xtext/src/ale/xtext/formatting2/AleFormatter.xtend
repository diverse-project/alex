/*
 * generated by Xtext 2.12.0
 */
package ale.xtext.formatting2

import ale.xtext.ale.AleClass
import ale.xtext.ale.AleImport
import ale.xtext.ale.AleMethod
import ale.xtext.ale.AleRoot
import ale.xtext.services.AleGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.XBlockExpression
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter

class AleFormatter extends XbaseFormatter {
	
	@Inject extension AleGrammarAccess

	def dispatch void format(AleRoot aleRoot, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		aleRoot.getJavaImports.format;
		aleRoot.getEcoreImport.format;
		for (AleImport aleImport : aleRoot.getAleImports()) {
			aleImport.format;
		}
		for (AleClass aleClass : aleRoot.getClasses()) {
			aleClass.format;
		}
	}

	def dispatch void format(AleClass aleClass, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		
		val openBracket = aleClass.regionFor.keyword(aleClassAccess.leftCurlyBracketKeyword_3)
		val closeBracket = aleClass.regionFor.keyword(aleClassAccess.rightCurlyBracketKeyword_5)
		
		interior(openBracket, closeBracket)[indent]
			openBracket.append[setNewLines(1,1,2)]
		 
		for (AleMethod aleMethod : aleClass.getMethods()) {
			aleMethod.format;
		}
	}
	
}
