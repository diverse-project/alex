/**
 * generated by Xtext 2.14.0
 */
package alex.xtext.alex.impl;

import alex.xtext.alex.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AlexFactoryImpl extends EFactoryImpl implements AlexFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AlexFactory init()
  {
    try
    {
      AlexFactory theAlexFactory = (AlexFactory)EPackage.Registry.INSTANCE.getEFactory(AlexPackage.eNS_URI);
      if (theAlexFactory != null)
      {
        return theAlexFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AlexFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AlexPackage.ALEX_ROOT: return createAlexRoot();
      case AlexPackage.ECORE_IMPORT: return createEcoreImport();
      case AlexPackage.ALEX_IMPORT: return createAlexImport();
      case AlexPackage.ALEX_CLASS: return createAlexClass();
      case AlexPackage.ALEX_METHOD: return createAlexMethod();
      case AlexPackage.CONCRETE_METHOD: return createConcreteMethod();
      case AlexPackage.ABSTRACT_METHOD: return createAbstractMethod();
      case AlexPackage.DEF_METHOD: return createDefMethod();
      case AlexPackage.OVERRIDE_METHOD: return createOverrideMethod();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexRoot createAlexRoot()
  {
    AlexRootImpl alexRoot = new AlexRootImpl();
    return alexRoot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcoreImport createEcoreImport()
  {
    EcoreImportImpl ecoreImport = new EcoreImportImpl();
    return ecoreImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexImport createAlexImport()
  {
    AlexImportImpl alexImport = new AlexImportImpl();
    return alexImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexClass createAlexClass()
  {
    AlexClassImpl alexClass = new AlexClassImpl();
    return alexClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexMethod createAlexMethod()
  {
    AlexMethodImpl alexMethod = new AlexMethodImpl();
    return alexMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteMethod createConcreteMethod()
  {
    ConcreteMethodImpl concreteMethod = new ConcreteMethodImpl();
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractMethod createAbstractMethod()
  {
    AbstractMethodImpl abstractMethod = new AbstractMethodImpl();
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefMethod createDefMethod()
  {
    DefMethodImpl defMethod = new DefMethodImpl();
    return defMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OverrideMethod createOverrideMethod()
  {
    OverrideMethodImpl overrideMethod = new OverrideMethodImpl();
    return overrideMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlexPackage getAlexPackage()
  {
    return (AlexPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AlexPackage getPackage()
  {
    return AlexPackage.eINSTANCE;
  }

} //AlexFactoryImpl
