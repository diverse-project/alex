/**
 * generated by Xtext 2.12.0
 */
package brew.xtext.brew.impl;

import ale.xtext.ale.AleRoot;

import brew.xtext.brew.AleImport;
import brew.xtext.brew.BrewPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ale Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link brew.xtext.brew.impl.AleImportImpl#getAle <em>Ale</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AleImportImpl extends MinimalEObjectImpl.Container implements AleImport
{
  /**
   * The cached value of the '{@link #getAle() <em>Ale</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAle()
   * @generated
   * @ordered
   */
  protected AleRoot ale;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AleImportImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrewPackage.Literals.ALE_IMPORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleRoot getAle()
  {
    if (ale != null && ale.eIsProxy())
    {
      InternalEObject oldAle = (InternalEObject)ale;
      ale = (AleRoot)eResolveProxy(oldAle);
      if (ale != oldAle)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.ALE_IMPORT__ALE, oldAle, ale));
      }
    }
    return ale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleRoot basicGetAle()
  {
    return ale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAle(AleRoot newAle)
  {
    AleRoot oldAle = ale;
    ale = newAle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.ALE_IMPORT__ALE, oldAle, ale));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrewPackage.ALE_IMPORT__ALE:
        if (resolve) return getAle();
        return basicGetAle();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrewPackage.ALE_IMPORT__ALE:
        setAle((AleRoot)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.ALE_IMPORT__ALE:
        setAle((AleRoot)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.ALE_IMPORT__ALE:
        return ale != null;
    }
    return super.eIsSet(featureID);
  }

} //AleImportImpl
