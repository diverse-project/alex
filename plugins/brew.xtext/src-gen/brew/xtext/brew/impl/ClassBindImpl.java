/**
 * generated by Xtext 2.12.0
 */
package brew.xtext.brew.impl;

import ale.xtext.ale.AleClass;

import brew.xtext.brew.BrewPackage;
import brew.xtext.brew.ClassBind;
import brew.xtext.brew.MethodBind;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Bind</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link brew.xtext.brew.impl.ClassBindImpl#getProvidedCls <em>Provided Cls</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.ClassBindImpl#getRequiredCls <em>Required Cls</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.ClassBindImpl#getMethodsBound <em>Methods Bound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassBindImpl extends MinimalEObjectImpl.Container implements ClassBind
{
  /**
   * The cached value of the '{@link #getProvidedCls() <em>Provided Cls</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvidedCls()
   * @generated
   * @ordered
   */
  protected AleClass providedCls;

  /**
   * The cached value of the '{@link #getRequiredCls() <em>Required Cls</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiredCls()
   * @generated
   * @ordered
   */
  protected AleClass requiredCls;

  /**
   * The cached value of the '{@link #getMethodsBound() <em>Methods Bound</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodsBound()
   * @generated
   * @ordered
   */
  protected EList<MethodBind> methodsBound;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassBindImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrewPackage.Literals.CLASS_BIND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass getProvidedCls()
  {
    if (providedCls != null && providedCls.eIsProxy())
    {
      InternalEObject oldProvidedCls = (InternalEObject)providedCls;
      providedCls = (AleClass)eResolveProxy(oldProvidedCls);
      if (providedCls != oldProvidedCls)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.CLASS_BIND__PROVIDED_CLS, oldProvidedCls, providedCls));
      }
    }
    return providedCls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass basicGetProvidedCls()
  {
    return providedCls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProvidedCls(AleClass newProvidedCls)
  {
    AleClass oldProvidedCls = providedCls;
    providedCls = newProvidedCls;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.CLASS_BIND__PROVIDED_CLS, oldProvidedCls, providedCls));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass getRequiredCls()
  {
    if (requiredCls != null && requiredCls.eIsProxy())
    {
      InternalEObject oldRequiredCls = (InternalEObject)requiredCls;
      requiredCls = (AleClass)eResolveProxy(oldRequiredCls);
      if (requiredCls != oldRequiredCls)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.CLASS_BIND__REQUIRED_CLS, oldRequiredCls, requiredCls));
      }
    }
    return requiredCls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass basicGetRequiredCls()
  {
    return requiredCls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequiredCls(AleClass newRequiredCls)
  {
    AleClass oldRequiredCls = requiredCls;
    requiredCls = newRequiredCls;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.CLASS_BIND__REQUIRED_CLS, oldRequiredCls, requiredCls));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MethodBind> getMethodsBound()
  {
    if (methodsBound == null)
    {
      methodsBound = new EObjectContainmentEList<MethodBind>(MethodBind.class, this, BrewPackage.CLASS_BIND__METHODS_BOUND);
    }
    return methodsBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BrewPackage.CLASS_BIND__METHODS_BOUND:
        return ((InternalEList<?>)getMethodsBound()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrewPackage.CLASS_BIND__PROVIDED_CLS:
        if (resolve) return getProvidedCls();
        return basicGetProvidedCls();
      case BrewPackage.CLASS_BIND__REQUIRED_CLS:
        if (resolve) return getRequiredCls();
        return basicGetRequiredCls();
      case BrewPackage.CLASS_BIND__METHODS_BOUND:
        return getMethodsBound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrewPackage.CLASS_BIND__PROVIDED_CLS:
        setProvidedCls((AleClass)newValue);
        return;
      case BrewPackage.CLASS_BIND__REQUIRED_CLS:
        setRequiredCls((AleClass)newValue);
        return;
      case BrewPackage.CLASS_BIND__METHODS_BOUND:
        getMethodsBound().clear();
        getMethodsBound().addAll((Collection<? extends MethodBind>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.CLASS_BIND__PROVIDED_CLS:
        setProvidedCls((AleClass)null);
        return;
      case BrewPackage.CLASS_BIND__REQUIRED_CLS:
        setRequiredCls((AleClass)null);
        return;
      case BrewPackage.CLASS_BIND__METHODS_BOUND:
        getMethodsBound().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.CLASS_BIND__PROVIDED_CLS:
        return providedCls != null;
      case BrewPackage.CLASS_BIND__REQUIRED_CLS:
        return requiredCls != null;
      case BrewPackage.CLASS_BIND__METHODS_BOUND:
        return methodsBound != null && !methodsBound.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ClassBindImpl
