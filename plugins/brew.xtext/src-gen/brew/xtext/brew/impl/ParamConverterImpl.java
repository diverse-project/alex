/**
 * generated by Xtext 2.12.0
 */
package brew.xtext.brew.impl;

import brew.xtext.brew.BasicConverter;
import brew.xtext.brew.BrewPackage;
import brew.xtext.brew.ParamConverter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.xtext.common.types.JvmFormalParameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Param Converter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link brew.xtext.brew.impl.ParamConverterImpl#getParamName <em>Param Name</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.ParamConverterImpl#getConverter <em>Converter</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.ParamConverterImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParamConverterImpl extends MinimalEObjectImpl.Container implements ParamConverter
{
  /**
   * The cached value of the '{@link #getParamName() <em>Param Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParamName()
   * @generated
   * @ordered
   */
  protected JvmFormalParameter paramName;

  /**
   * The cached value of the '{@link #getConverter() <em>Converter</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConverter()
   * @generated
   * @ordered
   */
  protected BasicConverter converter;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParamConverterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrewPackage.Literals.PARAM_CONVERTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmFormalParameter getParamName()
  {
    if (paramName != null && paramName.eIsProxy())
    {
      InternalEObject oldParamName = (InternalEObject)paramName;
      paramName = (JvmFormalParameter)eResolveProxy(oldParamName);
      if (paramName != oldParamName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.PARAM_CONVERTER__PARAM_NAME, oldParamName, paramName));
      }
    }
    return paramName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmFormalParameter basicGetParamName()
  {
    return paramName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParamName(JvmFormalParameter newParamName)
  {
    JvmFormalParameter oldParamName = paramName;
    paramName = newParamName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.PARAM_CONVERTER__PARAM_NAME, oldParamName, paramName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter getConverter()
  {
    if (converter != null && converter.eIsProxy())
    {
      InternalEObject oldConverter = (InternalEObject)converter;
      converter = (BasicConverter)eResolveProxy(oldConverter);
      if (converter != oldConverter)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.PARAM_CONVERTER__CONVERTER, oldConverter, converter));
      }
    }
    return converter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter basicGetConverter()
  {
    return converter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConverter(BasicConverter newConverter)
  {
    BasicConverter oldConverter = converter;
    converter = newConverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.PARAM_CONVERTER__CONVERTER, oldConverter, converter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.PARAM_CONVERTER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrewPackage.PARAM_CONVERTER__PARAM_NAME:
        if (resolve) return getParamName();
        return basicGetParamName();
      case BrewPackage.PARAM_CONVERTER__CONVERTER:
        if (resolve) return getConverter();
        return basicGetConverter();
      case BrewPackage.PARAM_CONVERTER__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrewPackage.PARAM_CONVERTER__PARAM_NAME:
        setParamName((JvmFormalParameter)newValue);
        return;
      case BrewPackage.PARAM_CONVERTER__CONVERTER:
        setConverter((BasicConverter)newValue);
        return;
      case BrewPackage.PARAM_CONVERTER__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.PARAM_CONVERTER__PARAM_NAME:
        setParamName((JvmFormalParameter)null);
        return;
      case BrewPackage.PARAM_CONVERTER__CONVERTER:
        setConverter((BasicConverter)null);
        return;
      case BrewPackage.PARAM_CONVERTER__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.PARAM_CONVERTER__PARAM_NAME:
        return paramName != null;
      case BrewPackage.PARAM_CONVERTER__CONVERTER:
        return converter != null;
      case BrewPackage.PARAM_CONVERTER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ParamConverterImpl
