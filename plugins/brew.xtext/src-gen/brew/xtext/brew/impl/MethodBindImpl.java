/**
 * generated by Xtext 2.12.0
 */
package brew.xtext.brew.impl;

import ale.xtext.ale.AbstractMethod;
import ale.xtext.ale.AleMethod;

import brew.xtext.brew.BrewPackage;
import brew.xtext.brew.MethodBind;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method Bind</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getAbstractMethod <em>Abstract Method</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getConcreteMethod <em>Concrete Method</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodBindImpl extends MinimalEObjectImpl.Container implements MethodBind
{
  /**
   * The cached value of the '{@link #getAbstractMethod() <em>Abstract Method</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractMethod()
   * @generated
   * @ordered
   */
  protected AbstractMethod abstractMethod;

  /**
   * The cached value of the '{@link #getConcreteMethod() <em>Concrete Method</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcreteMethod()
   * @generated
   * @ordered
   */
  protected AleMethod concreteMethod;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodBindImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrewPackage.Literals.METHOD_BIND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractMethod getAbstractMethod()
  {
    if (abstractMethod != null && abstractMethod.eIsProxy())
    {
      InternalEObject oldAbstractMethod = (InternalEObject)abstractMethod;
      abstractMethod = (AbstractMethod)eResolveProxy(oldAbstractMethod);
      if (abstractMethod != oldAbstractMethod)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__ABSTRACT_METHOD, oldAbstractMethod, abstractMethod));
      }
    }
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractMethod basicGetAbstractMethod()
  {
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAbstractMethod(AbstractMethod newAbstractMethod)
  {
    AbstractMethod oldAbstractMethod = abstractMethod;
    abstractMethod = newAbstractMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__ABSTRACT_METHOD, oldAbstractMethod, abstractMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod getConcreteMethod()
  {
    if (concreteMethod != null && concreteMethod.eIsProxy())
    {
      InternalEObject oldConcreteMethod = (InternalEObject)concreteMethod;
      concreteMethod = (AleMethod)eResolveProxy(oldConcreteMethod);
      if (concreteMethod != oldConcreteMethod)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__CONCRETE_METHOD, oldConcreteMethod, concreteMethod));
      }
    }
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod basicGetConcreteMethod()
  {
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConcreteMethod(AleMethod newConcreteMethod)
  {
    AleMethod oldConcreteMethod = concreteMethod;
    concreteMethod = newConcreteMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__CONCRETE_METHOD, oldConcreteMethod, concreteMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        if (resolve) return getAbstractMethod();
        return basicGetAbstractMethod();
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        if (resolve) return getConcreteMethod();
        return basicGetConcreteMethod();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        setAbstractMethod((AbstractMethod)newValue);
        return;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        setConcreteMethod((AleMethod)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        setAbstractMethod((AbstractMethod)null);
        return;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        setConcreteMethod((AleMethod)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        return abstractMethod != null;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        return concreteMethod != null;
    }
    return super.eIsSet(featureID);
  }

} //MethodBindImpl
