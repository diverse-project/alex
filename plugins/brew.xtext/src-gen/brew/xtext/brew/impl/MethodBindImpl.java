/**
 * generated by Xtext 2.12.0
 */
package brew.xtext.brew.impl;

import ale.xtext.ale.AleMethod;

import brew.xtext.brew.BasicConverter;
import brew.xtext.brew.BrewPackage;
import brew.xtext.brew.MethodBind;
import brew.xtext.brew.ParamConverter;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method Bind</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#isNothing <em>Nothing</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getConcreteMethod <em>Concrete Method</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getAbstractMethod <em>Abstract Method</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#isConverter <em>Converter</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getInitConverter <em>Init Converter</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getParamsConverters <em>Params Converters</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getReturnConverter <em>Return Converter</em>}</li>
 *   <li>{@link brew.xtext.brew.impl.MethodBindImpl#getCloseConverter <em>Close Converter</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodBindImpl extends MinimalEObjectImpl.Container implements MethodBind
{
  /**
   * The default value of the '{@link #isNothing() <em>Nothing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNothing()
   * @generated
   * @ordered
   */
  protected static final boolean NOTHING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNothing() <em>Nothing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNothing()
   * @generated
   * @ordered
   */
  protected boolean nothing = NOTHING_EDEFAULT;

  /**
   * The cached value of the '{@link #getConcreteMethod() <em>Concrete Method</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcreteMethod()
   * @generated
   * @ordered
   */
  protected AleMethod concreteMethod;

  /**
   * The cached value of the '{@link #getAbstractMethod() <em>Abstract Method</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractMethod()
   * @generated
   * @ordered
   */
  protected AleMethod abstractMethod;

  /**
   * The default value of the '{@link #isConverter() <em>Converter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConverter()
   * @generated
   * @ordered
   */
  protected static final boolean CONVERTER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConverter() <em>Converter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConverter()
   * @generated
   * @ordered
   */
  protected boolean converter = CONVERTER_EDEFAULT;

  /**
   * The cached value of the '{@link #getInitConverter() <em>Init Converter</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitConverter()
   * @generated
   * @ordered
   */
  protected BasicConverter initConverter;

  /**
   * The cached value of the '{@link #getParamsConverters() <em>Params Converters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParamsConverters()
   * @generated
   * @ordered
   */
  protected EList<ParamConverter> paramsConverters;

  /**
   * The cached value of the '{@link #getReturnConverter() <em>Return Converter</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnConverter()
   * @generated
   * @ordered
   */
  protected BasicConverter returnConverter;

  /**
   * The cached value of the '{@link #getCloseConverter() <em>Close Converter</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCloseConverter()
   * @generated
   * @ordered
   */
  protected BasicConverter closeConverter;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodBindImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrewPackage.Literals.METHOD_BIND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNothing()
  {
    return nothing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNothing(boolean newNothing)
  {
    boolean oldNothing = nothing;
    nothing = newNothing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__NOTHING, oldNothing, nothing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod getConcreteMethod()
  {
    if (concreteMethod != null && concreteMethod.eIsProxy())
    {
      InternalEObject oldConcreteMethod = (InternalEObject)concreteMethod;
      concreteMethod = (AleMethod)eResolveProxy(oldConcreteMethod);
      if (concreteMethod != oldConcreteMethod)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__CONCRETE_METHOD, oldConcreteMethod, concreteMethod));
      }
    }
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod basicGetConcreteMethod()
  {
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConcreteMethod(AleMethod newConcreteMethod)
  {
    AleMethod oldConcreteMethod = concreteMethod;
    concreteMethod = newConcreteMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__CONCRETE_METHOD, oldConcreteMethod, concreteMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod getAbstractMethod()
  {
    if (abstractMethod != null && abstractMethod.eIsProxy())
    {
      InternalEObject oldAbstractMethod = (InternalEObject)abstractMethod;
      abstractMethod = (AleMethod)eResolveProxy(oldAbstractMethod);
      if (abstractMethod != oldAbstractMethod)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__ABSTRACT_METHOD, oldAbstractMethod, abstractMethod));
      }
    }
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod basicGetAbstractMethod()
  {
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAbstractMethod(AleMethod newAbstractMethod)
  {
    AleMethod oldAbstractMethod = abstractMethod;
    abstractMethod = newAbstractMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__ABSTRACT_METHOD, oldAbstractMethod, abstractMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isConverter()
  {
    return converter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConverter(boolean newConverter)
  {
    boolean oldConverter = converter;
    converter = newConverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__CONVERTER, oldConverter, converter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter getInitConverter()
  {
    if (initConverter != null && initConverter.eIsProxy())
    {
      InternalEObject oldInitConverter = (InternalEObject)initConverter;
      initConverter = (BasicConverter)eResolveProxy(oldInitConverter);
      if (initConverter != oldInitConverter)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__INIT_CONVERTER, oldInitConverter, initConverter));
      }
    }
    return initConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter basicGetInitConverter()
  {
    return initConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitConverter(BasicConverter newInitConverter)
  {
    BasicConverter oldInitConverter = initConverter;
    initConverter = newInitConverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__INIT_CONVERTER, oldInitConverter, initConverter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ParamConverter> getParamsConverters()
  {
    if (paramsConverters == null)
    {
      paramsConverters = new EObjectContainmentEList<ParamConverter>(ParamConverter.class, this, BrewPackage.METHOD_BIND__PARAMS_CONVERTERS);
    }
    return paramsConverters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter getReturnConverter()
  {
    if (returnConverter != null && returnConverter.eIsProxy())
    {
      InternalEObject oldReturnConverter = (InternalEObject)returnConverter;
      returnConverter = (BasicConverter)eResolveProxy(oldReturnConverter);
      if (returnConverter != oldReturnConverter)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__RETURN_CONVERTER, oldReturnConverter, returnConverter));
      }
    }
    return returnConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter basicGetReturnConverter()
  {
    return returnConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReturnConverter(BasicConverter newReturnConverter)
  {
    BasicConverter oldReturnConverter = returnConverter;
    returnConverter = newReturnConverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__RETURN_CONVERTER, oldReturnConverter, returnConverter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter getCloseConverter()
  {
    if (closeConverter != null && closeConverter.eIsProxy())
    {
      InternalEObject oldCloseConverter = (InternalEObject)closeConverter;
      closeConverter = (BasicConverter)eResolveProxy(oldCloseConverter);
      if (closeConverter != oldCloseConverter)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BrewPackage.METHOD_BIND__CLOSE_CONVERTER, oldCloseConverter, closeConverter));
      }
    }
    return closeConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicConverter basicGetCloseConverter()
  {
    return closeConverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCloseConverter(BasicConverter newCloseConverter)
  {
    BasicConverter oldCloseConverter = closeConverter;
    closeConverter = newCloseConverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrewPackage.METHOD_BIND__CLOSE_CONVERTER, oldCloseConverter, closeConverter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__PARAMS_CONVERTERS:
        return ((InternalEList<?>)getParamsConverters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__NOTHING:
        return isNothing();
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        if (resolve) return getConcreteMethod();
        return basicGetConcreteMethod();
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        if (resolve) return getAbstractMethod();
        return basicGetAbstractMethod();
      case BrewPackage.METHOD_BIND__CONVERTER:
        return isConverter();
      case BrewPackage.METHOD_BIND__INIT_CONVERTER:
        if (resolve) return getInitConverter();
        return basicGetInitConverter();
      case BrewPackage.METHOD_BIND__PARAMS_CONVERTERS:
        return getParamsConverters();
      case BrewPackage.METHOD_BIND__RETURN_CONVERTER:
        if (resolve) return getReturnConverter();
        return basicGetReturnConverter();
      case BrewPackage.METHOD_BIND__CLOSE_CONVERTER:
        if (resolve) return getCloseConverter();
        return basicGetCloseConverter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__NOTHING:
        setNothing((Boolean)newValue);
        return;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        setConcreteMethod((AleMethod)newValue);
        return;
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        setAbstractMethod((AleMethod)newValue);
        return;
      case BrewPackage.METHOD_BIND__CONVERTER:
        setConverter((Boolean)newValue);
        return;
      case BrewPackage.METHOD_BIND__INIT_CONVERTER:
        setInitConverter((BasicConverter)newValue);
        return;
      case BrewPackage.METHOD_BIND__PARAMS_CONVERTERS:
        getParamsConverters().clear();
        getParamsConverters().addAll((Collection<? extends ParamConverter>)newValue);
        return;
      case BrewPackage.METHOD_BIND__RETURN_CONVERTER:
        setReturnConverter((BasicConverter)newValue);
        return;
      case BrewPackage.METHOD_BIND__CLOSE_CONVERTER:
        setCloseConverter((BasicConverter)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__NOTHING:
        setNothing(NOTHING_EDEFAULT);
        return;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        setConcreteMethod((AleMethod)null);
        return;
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        setAbstractMethod((AleMethod)null);
        return;
      case BrewPackage.METHOD_BIND__CONVERTER:
        setConverter(CONVERTER_EDEFAULT);
        return;
      case BrewPackage.METHOD_BIND__INIT_CONVERTER:
        setInitConverter((BasicConverter)null);
        return;
      case BrewPackage.METHOD_BIND__PARAMS_CONVERTERS:
        getParamsConverters().clear();
        return;
      case BrewPackage.METHOD_BIND__RETURN_CONVERTER:
        setReturnConverter((BasicConverter)null);
        return;
      case BrewPackage.METHOD_BIND__CLOSE_CONVERTER:
        setCloseConverter((BasicConverter)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrewPackage.METHOD_BIND__NOTHING:
        return nothing != NOTHING_EDEFAULT;
      case BrewPackage.METHOD_BIND__CONCRETE_METHOD:
        return concreteMethod != null;
      case BrewPackage.METHOD_BIND__ABSTRACT_METHOD:
        return abstractMethod != null;
      case BrewPackage.METHOD_BIND__CONVERTER:
        return converter != CONVERTER_EDEFAULT;
      case BrewPackage.METHOD_BIND__INIT_CONVERTER:
        return initConverter != null;
      case BrewPackage.METHOD_BIND__PARAMS_CONVERTERS:
        return paramsConverters != null && !paramsConverters.isEmpty();
      case BrewPackage.METHOD_BIND__RETURN_CONVERTER:
        return returnConverter != null;
      case BrewPackage.METHOD_BIND__CLOSE_CONVERTER:
        return closeConverter != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (nothing: ");
    result.append(nothing);
    result.append(", converter: ");
    result.append(converter);
    result.append(')');
    return result.toString();
  }

} //MethodBindImpl
