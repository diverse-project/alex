/**
 * generated by Xtext 2.12.0
 */
package ale.xtext.ale;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see ale.xtext.ale.AleFactory
 * @model kind="package"
 * @generated
 */
public interface AlePackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "ale";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.ale/Ale";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "ale";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  AlePackage eINSTANCE = ale.xtext.ale.impl.AlePackageImpl.init();

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.RootImpl <em>Root</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.RootImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getRoot()
   * @generated
   */
  int ROOT = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT__NAME = 0;

  /**
   * The feature id for the '<em><b>Import Section</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT__IMPORT_SECTION = 1;

  /**
   * The feature id for the '<em><b>Import Ecore</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT__IMPORT_ECORE = 2;

  /**
   * The feature id for the '<em><b>Imports Ale</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT__IMPORTS_ALE = 3;

  /**
   * The feature id for the '<em><b>Classes</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT__CLASSES = 4;

  /**
   * The number of structural features of the '<em>Root</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ROOT_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.ImportAleImpl <em>Import Ale</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.ImportAleImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getImportAle()
   * @generated
   */
  int IMPORT_ALE = 1;

  /**
   * The feature id for the '<em><b>Ref</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IMPORT_ALE__REF = 0;

  /**
   * The number of structural features of the '<em>Import Ale</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IMPORT_ALE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.ImportEcoreImpl <em>Import Ecore</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.ImportEcoreImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getImportEcore()
   * @generated
   */
  int IMPORT_ECORE = 2;

  /**
   * The feature id for the '<em><b>Ref</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IMPORT_ECORE__REF = 0;

  /**
   * The number of structural features of the '<em>Import Ecore</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IMPORT_ECORE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AleClassImpl <em>Class</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AleClassImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAleClass()
   * @generated
   */
  int ALE_CLASS = 3;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS__NAME = 0;

  /**
   * The feature id for the '<em><b>Methods</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS__METHODS = 1;

  /**
   * The number of structural features of the '<em>Class</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.MethodImpl <em>Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.MethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getMethod()
   * @generated
   */
  int METHOD = 4;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__TYPE = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__NAME = 1;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__PARAMS = 2;

  /**
   * The number of structural features of the '<em>Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.ConcreteMethodImpl <em>Concrete Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.ConcreteMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getConcreteMethod()
   * @generated
   */
  int CONCRETE_METHOD = 5;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__TYPE = METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__NAME = METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__PARAMS = METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__BLOCK = METHOD_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Concrete Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD_FEATURE_COUNT = METHOD_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AbstractMethodImpl <em>Abstract Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AbstractMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAbstractMethod()
   * @generated
   */
  int ABSTRACT_METHOD = 6;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__TYPE = METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__NAME = METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__PARAMS = METHOD__PARAMS;

  /**
   * The number of structural features of the '<em>Abstract Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD_FEATURE_COUNT = METHOD_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.DefMethodImpl <em>Def Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.DefMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getDefMethod()
   * @generated
   */
  int DEF_METHOD = 7;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__TYPE = CONCRETE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__NAME = CONCRETE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__PARAMS = CONCRETE_METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__BLOCK = CONCRETE_METHOD__BLOCK;

  /**
   * The number of structural features of the '<em>Def Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD_FEATURE_COUNT = CONCRETE_METHOD_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.OverrideMethodImpl <em>Override Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.OverrideMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getOverrideMethod()
   * @generated
   */
  int OVERRIDE_METHOD = 8;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__TYPE = CONCRETE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__NAME = CONCRETE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__PARAMS = CONCRETE_METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__BLOCK = CONCRETE_METHOD__BLOCK;

  /**
   * The number of structural features of the '<em>Override Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD_FEATURE_COUNT = CONCRETE_METHOD_FEATURE_COUNT + 0;


  /**
   * Returns the meta object for class '{@link ale.xtext.ale.Root <em>Root</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Root</em>'.
   * @see ale.xtext.ale.Root
   * @generated
   */
  EClass getRoot();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.Root#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.Root#getName()
   * @see #getRoot()
   * @generated
   */
  EAttribute getRoot_Name();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.Root#getImportSection <em>Import Section</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Import Section</em>'.
   * @see ale.xtext.ale.Root#getImportSection()
   * @see #getRoot()
   * @generated
   */
  EReference getRoot_ImportSection();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.Root#getImportEcore <em>Import Ecore</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Import Ecore</em>'.
   * @see ale.xtext.ale.Root#getImportEcore()
   * @see #getRoot()
   * @generated
   */
  EReference getRoot_ImportEcore();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.Root#getImportsAle <em>Imports Ale</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Imports Ale</em>'.
   * @see ale.xtext.ale.Root#getImportsAle()
   * @see #getRoot()
   * @generated
   */
  EReference getRoot_ImportsAle();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.Root#getClasses <em>Classes</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Classes</em>'.
   * @see ale.xtext.ale.Root#getClasses()
   * @see #getRoot()
   * @generated
   */
  EReference getRoot_Classes();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.ImportAle <em>Import Ale</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Import Ale</em>'.
   * @see ale.xtext.ale.ImportAle
   * @generated
   */
  EClass getImportAle();

  /**
   * Returns the meta object for the reference '{@link ale.xtext.ale.ImportAle#getRef <em>Ref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Ref</em>'.
   * @see ale.xtext.ale.ImportAle#getRef()
   * @see #getImportAle()
   * @generated
   */
  EReference getImportAle_Ref();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.ImportEcore <em>Import Ecore</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Import Ecore</em>'.
   * @see ale.xtext.ale.ImportEcore
   * @generated
   */
  EClass getImportEcore();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.ImportEcore#getRef <em>Ref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Ref</em>'.
   * @see ale.xtext.ale.ImportEcore#getRef()
   * @see #getImportEcore()
   * @generated
   */
  EAttribute getImportEcore_Ref();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AleClass <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Class</em>'.
   * @see ale.xtext.ale.AleClass
   * @generated
   */
  EClass getAleClass();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.AleClass#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.AleClass#getName()
   * @see #getAleClass()
   * @generated
   */
  EAttribute getAleClass_Name();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.AleClass#getMethods <em>Methods</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Methods</em>'.
   * @see ale.xtext.ale.AleClass#getMethods()
   * @see #getAleClass()
   * @generated
   */
  EReference getAleClass_Methods();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Method</em>'.
   * @see ale.xtext.ale.Method
   * @generated
   */
  EClass getMethod();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.Method#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see ale.xtext.ale.Method#getType()
   * @see #getMethod()
   * @generated
   */
  EReference getMethod_Type();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.Method#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.Method#getName()
   * @see #getMethod()
   * @generated
   */
  EAttribute getMethod_Name();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.Method#getParams <em>Params</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Params</em>'.
   * @see ale.xtext.ale.Method#getParams()
   * @see #getMethod()
   * @generated
   */
  EReference getMethod_Params();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.ConcreteMethod <em>Concrete Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Concrete Method</em>'.
   * @see ale.xtext.ale.ConcreteMethod
   * @generated
   */
  EClass getConcreteMethod();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.ConcreteMethod#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see ale.xtext.ale.ConcreteMethod#getBlock()
   * @see #getConcreteMethod()
   * @generated
   */
  EReference getConcreteMethod_Block();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AbstractMethod <em>Abstract Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Abstract Method</em>'.
   * @see ale.xtext.ale.AbstractMethod
   * @generated
   */
  EClass getAbstractMethod();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.DefMethod <em>Def Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Def Method</em>'.
   * @see ale.xtext.ale.DefMethod
   * @generated
   */
  EClass getDefMethod();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.OverrideMethod <em>Override Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Override Method</em>'.
   * @see ale.xtext.ale.OverrideMethod
   * @generated
   */
  EClass getOverrideMethod();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  AleFactory getAleFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.RootImpl <em>Root</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.RootImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getRoot()
     * @generated
     */
    EClass ROOT = eINSTANCE.getRoot();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ROOT__NAME = eINSTANCE.getRoot_Name();

    /**
     * The meta object literal for the '<em><b>Import Section</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ROOT__IMPORT_SECTION = eINSTANCE.getRoot_ImportSection();

    /**
     * The meta object literal for the '<em><b>Import Ecore</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ROOT__IMPORT_ECORE = eINSTANCE.getRoot_ImportEcore();

    /**
     * The meta object literal for the '<em><b>Imports Ale</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ROOT__IMPORTS_ALE = eINSTANCE.getRoot_ImportsAle();

    /**
     * The meta object literal for the '<em><b>Classes</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ROOT__CLASSES = eINSTANCE.getRoot_Classes();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.ImportAleImpl <em>Import Ale</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.ImportAleImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getImportAle()
     * @generated
     */
    EClass IMPORT_ALE = eINSTANCE.getImportAle();

    /**
     * The meta object literal for the '<em><b>Ref</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IMPORT_ALE__REF = eINSTANCE.getImportAle_Ref();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.ImportEcoreImpl <em>Import Ecore</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.ImportEcoreImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getImportEcore()
     * @generated
     */
    EClass IMPORT_ECORE = eINSTANCE.getImportEcore();

    /**
     * The meta object literal for the '<em><b>Ref</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute IMPORT_ECORE__REF = eINSTANCE.getImportEcore_Ref();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AleClassImpl <em>Class</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AleClassImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAleClass()
     * @generated
     */
    EClass ALE_CLASS = eINSTANCE.getAleClass();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ALE_CLASS__NAME = eINSTANCE.getAleClass_Name();

    /**
     * The meta object literal for the '<em><b>Methods</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_CLASS__METHODS = eINSTANCE.getAleClass_Methods();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.MethodImpl <em>Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.MethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getMethod()
     * @generated
     */
    EClass METHOD = eINSTANCE.getMethod();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference METHOD__TYPE = eINSTANCE.getMethod_Type();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute METHOD__NAME = eINSTANCE.getMethod_Name();

    /**
     * The meta object literal for the '<em><b>Params</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference METHOD__PARAMS = eINSTANCE.getMethod_Params();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.ConcreteMethodImpl <em>Concrete Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.ConcreteMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getConcreteMethod()
     * @generated
     */
    EClass CONCRETE_METHOD = eINSTANCE.getConcreteMethod();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONCRETE_METHOD__BLOCK = eINSTANCE.getConcreteMethod_Block();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AbstractMethodImpl <em>Abstract Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AbstractMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAbstractMethod()
     * @generated
     */
    EClass ABSTRACT_METHOD = eINSTANCE.getAbstractMethod();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.DefMethodImpl <em>Def Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.DefMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getDefMethod()
     * @generated
     */
    EClass DEF_METHOD = eINSTANCE.getDefMethod();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.OverrideMethodImpl <em>Override Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.OverrideMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getOverrideMethod()
     * @generated
     */
    EClass OVERRIDE_METHOD = eINSTANCE.getOverrideMethod();

  }

} //AlePackage
