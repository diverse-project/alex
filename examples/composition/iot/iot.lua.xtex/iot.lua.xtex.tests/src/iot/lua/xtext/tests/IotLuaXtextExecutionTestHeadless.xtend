/*
 * generated by Xtext 2.12.0
 */
package iot.lua.xtext.tests

import exec_iot_lua.revisitor.impl.Exec_iot_luaRevisitor
import iot.System
import iot_lua.Iot_luaFactory
import iot_lua.Iot_luaPackage
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl

class IotLuaXtextExecutionTestHeadless {
	def static void main(String[] args) {
		val warmup = 50
		val iterations = 500
		val res = newArrayList
		val resWar = newArrayList

		val o = new IotLuaXtextExecutionTestHeadless

		for (var i = 0; i < warmup; i++) {
			resWar += o.run()
			println('warm')
		}

		for (var i = 0; i < iterations; i++) {
			res += o.run()
			println('hot')
		}

		println(resWar.map[""].join(""))
		println(res.join("\n"))

	}

	def long run() {
		val rs = new ResourceSetImpl
		val extensionFactoryMap = Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap
		extensionFactoryMap.put("xmi", new XMIResourceFactoryImpl())
		extensionFactoryMap.put("ecore", new EcoreResourceFactoryImpl());
		Iot_luaFactory.eINSTANCE.eClass();
		val loadIotlua = Iot_luaPackage.eINSTANCE
		EPackage.Registry.INSTANCE.put(Iot_luaPackage.eNS_URI, Iot_luaPackage.eINSTANCE);
		
//		val rsiot = rs.getResource(URI.createURI("/home/mleduc/dev/java/ale-xbase/examples/composition/iot/iot.model/model/iot.ecore"), true)
		
//		val piot = rsiot.contents.head as EPackage
//		EPackage.Registry.INSTANCE.put(piot.nsURI, piot);
		
		val r = rs.getResource(URI.createURI("perfs3.xmi"), true)
		r.load(null)

		val s = r.contents.head as System

		val rev = new Exec_iot_luaRevisitor() {
		}
		val o = rev.$(s.sketch.activity)
		return o.main()
	}
}
