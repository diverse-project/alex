behavior gfsmeval

import gfsm.dyn.Context
import gfsm.InitialState

import ecore "platform:/resource/GFSM/model/gfsm.ecore"

open class Machine {
	def void execute(String[] events, Context ctx) {
		val initial = obj.states.filter(InitialState).head

		if (initial === null)
			throw new RuntimeException("No initial state")

		ctx.current = initial
		events.forEach[e |
			alg.$(ctx.current).step(e, ctx)
		]
	}
}

open class State {
	def void step(String event, Context ctx) {
		ctx.visit(obj)
		
		println("step into " + obj.name)

		val next = obj.outgoing.filter[t | t.event == event].head

		if (next === null)
			throw new RuntimeException("Locked in " + obj.name + " with " + event)

		alg.$(next).fire(ctx) 
	}
}

open class Transition {
	def void fire(Context ctx) {
		
		ctx.current = obj.target
	}
}


open class Guard {
	abstract def boolean evaluate()
}