/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl4.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Expression");
		private final RuleCall cSumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum
		public RuleCall getSumParserRuleCall() { return cSumParserRuleCall; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cSumLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsMulParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Sum Expression:
		//	Mul (=> ({Sum.lhs=current} '+') rhs=Mul)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Mul (=> ({Sum.lhs=current} '+') rhs=Mul)*
		public Group getGroup() { return cGroup; }
		
		//Mul
		public RuleCall getMulParserRuleCall_0() { return cMulParserRuleCall_0; }
		
		//(=> ({Sum.lhs=current} '+') rhs=Mul)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Sum.lhs=current} '+')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Sum.lhs=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Sum.lhs=current}
		public Action getSumLhsAction_1_0_0_0() { return cSumLhsAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//rhs=Mul
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Mul
		public RuleCall getRhsMulParserRuleCall_1_1_0() { return cRhsMulParserRuleCall_1_1_0; }
	}
	public class MulElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Mul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cMulLhsAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsTerminalParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Mul Expression:
		//	Terminal (=> ({Mul.lhs=current} '*') rhs=Terminal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Terminal (=> ({Mul.lhs=current} '*') rhs=Terminal)*
		public Group getGroup() { return cGroup; }
		
		//Terminal
		public RuleCall getTerminalParserRuleCall_0() { return cTerminalParserRuleCall_0; }
		
		//(=> ({Mul.lhs=current} '*') rhs=Terminal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({Mul.lhs=current} '*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Mul.lhs=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.lhs=current}
		public Action getMulLhsAction_1_0_0_0() { return cMulLhsAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//rhs=Terminal
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Terminal
		public RuleCall getRhsTerminalParserRuleCall_1_1_0() { return cRhsTerminalParserRuleCall_1_1_0; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNegParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Terminal Expression:
		//	'(' Expression ')' | Literal | Neg;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | Literal | Neg
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
		
		//Neg
		public RuleCall getNegParserRuleCall_2() { return cNegParserRuleCall_2; }
	}
	public class NegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Neg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Neg Expression:
		//	{Neg} '-' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Neg} '-' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//{Neg}
		public Action getNegAction_0() { return cNegAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueELongParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Literal:
		//	{Literal} value=ELong;
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} value=ELong
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//value=ELong
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ELong
		public RuleCall getValueELongParserRuleCall_1_0() { return cValueELongParserRuleCall_1_0; }
	}
	public class ELongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.ELong");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ELong ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ExpressionElements pExpression;
	private final SumElements pSum;
	private final MulElements pMul;
	private final TerminalElements pTerminal;
	private final NegElements pNeg;
	private final LiteralElements pLiteral;
	private final ELongElements pELong;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpression = new ExpressionElements();
		this.pSum = new SumElements();
		this.pMul = new MulElements();
		this.pTerminal = new TerminalElements();
		this.pNeg = new NegElements();
		this.pLiteral = new LiteralElements();
		this.pELong = new ELongElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl4.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression:
	//	Sum;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Sum Expression:
	//	Mul (=> ({Sum.lhs=current} '+') rhs=Mul)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Mul Expression:
	//	Terminal (=> ({Mul.lhs=current} '*') rhs=Terminal)*;
	public MulElements getMulAccess() {
		return pMul;
	}
	
	public ParserRule getMulRule() {
		return getMulAccess().getRule();
	}
	
	//Terminal Expression:
	//	'(' Expression ')' | Literal | Neg;
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//Neg Expression:
	//	{Neg} '-' exp=Expression;
	public NegElements getNegAccess() {
		return pNeg;
	}
	
	public ParserRule getNegRule() {
		return getNegAccess().getRule();
	}
	
	//Literal:
	//	{Literal} value=ELong;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ELong ecore::ELong:
	//	INT;
	public ELongElements getELongAccess() {
		return pELong;
	}
	
	public ParserRule getELongRule() {
		return getELongAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
